{"version":3,"sources":["characters_utility.js","components/CharacterCreation.js","components/CharacterSelect.js","components/ScrollToTop.js","components/CharacterPage.js","components/App.js","serviceWorker.js","index.js","wizard_color.png","elf.png","orc.png","rogue.png","knight.png","constitution_color.png","Intelligence_color.png","Strength_color.png","wisdom_color.png","charisma.png","dexterity.png"],"names":["fs","require","getCharactersFromJSON","callback","flagCallback","exists","readFile","err","data","JSON","parse","writeFile","writeCharactersToJSON","characters","a","stringify","findIndexWithAttribute","array","attr","value","i","length","statTypes","getCharacterImage","className","toLowerCase","mageImg","elfImg","orcImg","rogueImg","knightImg","getBaseStatImage","statName","strengthImg","intelligenceImg","wisdomImg","constitutionImg","dexterityImg","charismaImg","CHARACTER_NAME_ERROR_INDEX","CAMPAIGN_NAME_ERROR_INDEX","INIT_MAX_XP_ERROR_INDEX","INIT_MAX_HP_ERROR_INDEX","CharacterCreation","props","React","useState","characterName","setCharacterName","initMapXP","setInitMaxXP","initMaxHP","setInitMaxHP","campaignName","setCampaignName","characterClass","setCharacterClass","modalOpen","setModalOpen","errorMessages","setErrorMessages","closeModal","handleSubmit","e","passedEvaluation","initial_max_hp","initial_max_xp","campaign_name","class_name","_list","newCharacter","parseInt","ID","push","setHasSaved","setCharacters","onClick","isOpen","onRequestClose","shouldCloseOnOverlayClick","type","name","placeholder","onChange","target","map","element","key","CharacterSelectOption","src","character","alt","to","removeCallback","CharacterSelect","hasLoaded","setLoaded","hasSaved","removeCharacter","splice","findIndex","c","ScrollToTop","window","scrollTo","Modal","setAppElement","itemTypes","CharacterHeader","updateHP","dir","hp","updatedCharacter","openModal","levelUpModalOpen","setLevelUpModalOpen","openLevelUpModal","closeLevelUpModal","handleStateClick","setCurrentPage","showTemp","setShowTemp","xmlns","width","height","viewBox","opacity","fill","d","level","max_hp","temporary_hp","style","xp","max_xp","currentPage","HPAndXPModal","updateMaxXP","updateXP","updateMaxHP","updateTemporaryHP","showTemporary","overflow","temp","LevelUpModal","increaseMaxXP","setIncreaseMaxXP","increaseMaxHP","setIncreaseMaxHP","incrementerHP","setIncrementerHP","incrementerMaxHP","setIncrementerMaxHP","incrementerTemporaryHP","setIncrementerTemporaryHP","incrementerXP","setIncrementerXP","incrementerMaxXP","setIncrementerMaxXP","x","BaseStatCard","changeStatLevel","base_stats","find","s","base_stat","modifier","Math","floor","StatCard","stats","stat","Stats","newStatName","setNewStatName","newStatType","setNewStatType","newStatLevel","setNewStatLevel","setStatTypes","wantsCustomType","setWantsCustomType","searchString","setSearchString","filteredStats","keys","filter","entry","returnValue","forEach","indexOf","toLocaleLowerCase","sort","statA","statB","addNewStat","wasEvaluated","_errors","newStatObject","baseType","writeStatTypesToJSON","j","v","st","msg","ItemCard","item","setName","cost","setCost","amount","setAmount","desc","setDesc","setType","index","inventory","Inventory","newItemName","setNewItemName","newItemDesc","setNewItemDesc","newItemType","setNewItemType","newItemAmount","setNewItemAmount","newItemCost","setNewItemCost","addNewItem","newItemObject","filteredInventory","CombatCard","id","combats","combat","maximum","total","successes","failures","Combat","filteredCombat","CharacterPage","match","setCharacter","toString","params","App","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"imBAiBIA,EAAKC,EAAQ,IA0FV,SAASC,EAAsBC,EAAUC,GAC5CJ,EAAGK,OAAO,mBAAmB,SAASA,GAC9BA,EAOAL,EAAGM,SAAS,kBAAmB,QAAQ,SAASC,EAAKC,GACjD,GAAGD,EAAK,MAAMA,EACdJ,EAASM,KAAKC,MAAMF,IACpBJ,GAAa,MARjBJ,EAAGW,UAAU,kBAAmB,GAAI,QAAQ,SAAAJ,GACxC,GAAGA,EAAK,MAAMA,QAavB,SAAeK,EAAtB,oC,4CAAO,WAAqCC,EAAYT,GAAjD,SAAAU,EAAA,sEACGd,EAAGW,UAAU,kBAAmBF,KAAKM,UAAUF,GAAa,QAAQ,SAAAN,GACtE,GAAGA,EAAK,MAAMA,EAEdH,GAAa,MAJd,4C,sBAQA,SAASY,EAAuBC,EAAOC,EAAMC,GAChD,IAAI,IAAIC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAC7B,GAAGH,EAAMG,GAAGF,KAAUC,EAClB,OAAOC,EAGf,OAAQ,E,4CA4CL,WAAoCE,GAApC,SAAAR,EAAA,sEACGd,EAAGW,UAAU,kBAAmBF,KAAKM,UAAUO,GAAY,QAAQ,SAAAf,GACrE,GAAGA,EAAK,MAAMA,KAFf,4C,sBAOA,SAASgB,EAAkBC,GACjC,OAAOA,EAAUC,eAChB,IAAK,OACJ,OAAOC,IACR,IAAK,MACJ,OAAOC,IACR,IAAK,MACJ,OAAOC,IACR,IAAK,QACJ,OAAOC,IACR,IAAK,SACJ,OAAOC,IACR,QACC,OAAOJ,KAGH,SAASK,EAAiBC,GAChC,OAAOA,EAASP,eACf,IAAK,WACJ,OAAOQ,IACR,IAAK,eACJ,OAAOC,IACR,IAAK,SACJ,OAAOC,IACR,IAAK,eACJ,OAAOC,IACR,IAAK,YACJ,OAAOC,IACR,IAAK,WACJ,OAAOC,IACR,QACC,OAAOZ,K,2BCrNJa,G,OAA6B,GAC7BC,EAA4B,EAC5BC,EAA0B,EAC1BC,EAA0B,EA2HjBC,MAzHf,SAA2BC,GAAO,MAGYC,IAAMC,SAAS,IAH3B,mBAGvBC,EAHuB,KAGRC,EAHQ,OAIIH,IAAMC,SAAS,GAJnB,mBAIvBG,EAJuB,KAIZC,EAJY,OAKIL,IAAMC,SAAS,GALnB,mBAKvBK,EALuB,KAKZC,EALY,OAMUP,IAAMC,SAAS,IANzB,mBAMvBO,EANuB,KAMTC,EANS,OAOcT,IAAMC,SAAS,IAP7B,mBAOvBS,EAPuB,KAOPC,EAPO,OAQIX,IAAMC,UAAS,GARnB,mBAQvBW,EARuB,KAQZC,EARY,OASYb,IAAMC,SAAS,IAT3B,mBASvBa,EATuB,KASRC,EATQ,KAc1BC,EAAa,WACbD,EAAiB,IACjBF,GAAa,IAGbI,EAAe,SAACC,GAEhB,IAAIC,GAAmB,EACvBJ,EAAiB,IACjB,IDjB+BK,EAAgBC,EAAgBC,EAAeC,ECiB1EC,EAAQ,GAqBZ,GAlBqB,KAAlBtB,IACCiB,GAAmB,EACnBK,EAAM9B,IAA8B,GAEpB,KAAjBc,IACCW,GAAmB,EACnBK,EAAM7B,IAA6B,GAEpCS,GAAa,IACZe,GAAmB,EACnBK,EAAM5B,IAA2B,GAElCU,GAAa,IACZa,GAAmB,EACnBK,EAAM3B,IAA2B,GAErCkB,EAAiBS,GAEdL,EAAkB,CAEjB,IAAIM,GDxCuBL,ECwCwBd,EDxCRe,ECwCmBjB,EDxCHkB,ECwCcd,EDxCCe,ECwCab,EDvCrF,CACN,KCsCwCR,EDrC9C,GAAMwB,SAASN,GACf,OAAUM,SAASN,GACnB,aAAgB,EACV,MAAS,EACT,GAAM,EACN,OAAUM,SAASL,GACzB,cAAiBC,EACjB,WAAcC,EAEd,OAAU,EACV,OAAU,EACV,SAAY,EACZ,KAAQ,EACR,SAAY,EAEZ,UAAY,CACX,CAAC,KAAQ,aAAe,KAAQ,kBAAmB,KAAQ,UAC3D,CAAC,KAAQ,OAAS,KAAQ,YAAa,KAAQ,UAE/C,CAAC,KAAQ,oBAAsB,MAAS,EAAG,KAAQ,SACnD,CAAC,KAAQ,YAAc,KAAQ,aAAc,KAAQ,UAErD,CAAC,KAAQ,qBAAuB,KAAQ,iBAAkB,KAAQ,UAClE,CAAC,KAAQ,SAAW,KAAQ,gBAAiB,KAAQ,UACrD,CAAC,KAAQ,QAAU,KAAQ,YAAa,KAAQ,UAChD,CAAC,KAAQ,QAAU,KAAQ,OAAQ,KAAQ,WAE5C,WAAe,CACL,CAAE,KAAQ,WAAY,MAAS,IAC/B,CAAE,KAAQ,YAAa,MAAS,IAChC,CAAE,KAAQ,eAAgB,MAAS,IACnC,CAAE,KAAQ,eAAgB,MAAS,IACnC,CAAE,KAAQ,SAAU,MAAS,IAC7B,CAAE,KAAQ,WAAY,MAAS,KAEnC,MAAQ,CACb,CAAC,KAAQ,aAAc,MAAS,EAAG,KAAQ,QAAS,SAAY,aAChE,CAAC,KAAQ,kBAAmB,MAAS,EAAG,KAAQ,QAAS,SAAY,UACrE,CAAC,KAAQ,SAAU,MAAS,EAAG,KAAQ,QAAS,SAAY,gBAC5D,CAAC,KAAQ,YAAa,MAAS,EAAG,KAAQ,QAAS,SAAY,YAC/D,CAAC,KAAQ,YAAa,MAAS,EAAG,KAAQ,QAAS,SAAY,YAC/D,CAAC,KAAQ,UAAW,MAAS,EAAG,KAAQ,QAAS,SAAY,gBAC7D,CAAC,KAAQ,UAAW,MAAS,EAAG,KAAQ,QAAS,SAAY,UAC7D,CAAC,KAAQ,eAAgB,MAAS,EAAG,KAAQ,QAAS,SAAY,YAClE,CAAC,KAAQ,gBAAiB,MAAS,EAAG,KAAQ,QAAS,SAAY,gBACnE,CAAC,KAAQ,WAAY,MAAS,EAAG,KAAQ,QAAS,SAAY,UAC9D,CAAC,KAAQ,SAAU,MAAS,EAAG,KAAQ,QAAS,SAAY,gBAC5D,CAAC,KAAQ,aAAc,MAAS,EAAG,KAAQ,QAAS,SAAY,UAChE,CAAC,KAAQ,cAAe,MAAS,EAAG,KAAQ,QAAS,SAAY,YACjE,CAAC,KAAQ,aAAc,MAAS,EAAG,KAAQ,QAAS,SAAY,YAChE,CAAC,KAAQ,WAAY,MAAS,EAAG,KAAQ,QAAS,SAAY,gBAC9D,CAAC,KAAQ,kBAAmB,MAAS,EAAG,KAAQ,QAAS,SAAY,aACrE,CAAC,KAAQ,UAAW,MAAS,EAAG,KAAQ,QAAS,SAAY,aAC7D,CAAC,KAAQ,WAAY,MAAS,EAAG,KAAQ,QAAS,SAAY,UAE9D,CAAC,KAAQ,8BAAgC,MAAS,EAAG,KAAQ,SAAU,SAAY,QACnF,CAAC,KAAQ,UAAY,MAAS,EAAG,KAAQ,WAAY,SAAY,UAE5D,UAAY,CACjB,CAAC,KAAQ,qBAAsB,KAAQ,mBAAqB,OAAU,EAAG,KAAQ,YAAa,KAAQ,cAEvG,QAAU,CACT,CAAC,KAAQ,WAAY,MAAS,EAAG,KAAQ,gBACzC,CAAC,KAAQ,YAAa,MAAS,EAAG,KAAQ,gBAC1C,CAAC,KAAQ,eAAgB,MAAS,EAAG,KAAQ,gBAC7C,CAAC,KAAQ,eAAgB,MAAS,EAAG,KAAQ,gBAC7C,CAAC,KAAQ,SAAU,MAAS,EAAG,KAAQ,gBACvC,CAAC,KAAQ,WAAY,MAAS,EAAG,KAAQ,gBAEzC,CAAC,KAAQ,eAAgB,MAAS,GAClC,CAAC,KAAQ,aAAc,MAAS,GAChC,CAAC,KAAQ,QAAS,MAAS,GAC3B,CAAC,KAAQ,WAAY,MAAS,EAAI,MAAS,GAC3C,CAAC,KAAQ,cAAe,UAAa,EAAG,SAAY,MCjCZ,IAA5BxB,EAAM/B,WAAWQ,OAChBiD,EAAaE,GAAK,EAGlBF,EAAaE,GAAK5B,EAAM/B,WAAW+B,EAAM/B,WAAWQ,OAAO,GAAGmD,GAAK,EAEvE5B,EAAM/B,WAAW4D,KAAKH,GACtB1D,EAAsBgC,EAAM/B,WAAY+B,EAAM8B,aAC9C9B,EAAM+B,cAAc/B,EAAM/B,YAC1BgD,IAGAb,EAAiB,IACjBE,EAAa,GACbE,EAAa,GACbE,EAAgB,IAChBE,EAAkB,UAI1B,OAEI,yBAAKhC,UAAU,qBACX,uBAAGoD,QAAS,WA5DhBlB,GAAa,KA4DT,4BACA,kBAAC,IAAD,CACImB,OAAQpB,EACRqB,eAAgB,kBAAMjB,KACtBkB,2BAA2B,EAC3BvD,UAAU,UAEV,yBAAKA,UAAU,kBACX,8BACI,+BAEI,6CAAgE,IAA9CmC,EAAcpB,IAAwC,0BAAMf,UAAU,iBAAhB,4BACxE,2BAAOwD,KAAK,OAAOC,KAAK,OAAO9D,MAAO4B,EAAemC,YAAY,OAAOC,SAAU,SAAApB,GAAC,OAAIf,EAAiBe,EAAEqB,OAAOjE,WAErH,6BACA,+BACI,6CAA6D,IAA3CwC,EAAcjB,IAAqC,0BAAMlB,UAAU,iBAAhB,4BACrE,2BAAOwD,KAAK,SAASC,KAAK,KAAK9D,MAAOgC,EAAWgC,SAAU,SAAApB,GAAC,OAAIX,EAAaW,EAAEqB,OAAOjE,WAE1F,+BACI,6CAA6D,IAA3CwC,EAAclB,IAAqC,0BAAMjB,UAAU,iBAAhB,4BACrE,2BAAOwD,KAAK,SAASC,KAAK,cAAc9D,MAAO8B,EAAWkC,SAAW,SAAApB,GAAC,OAAIb,EAAaa,EAAEqB,OAAOjE,WAGpG,+BACI,4CAA8D,IAA7CwC,EAAcnB,IAAuC,0BAAMhB,UAAU,iBAAhB,2BACtE,2BAAOwD,KAAK,OAAOC,KAAK,gBAAgB9D,MAAOkC,EAAc6B,YAAY,gBAAgBC,SAAU,SAAApB,GAAC,OAAIT,EAAgBS,EAAEqB,OAAOjE,WAErI,+BACI,oCACA,4BAAQ8D,KAAK,QAAQ9D,MAAOoC,EAAgB4B,SAAU,SAAApB,GAAMP,EAAkBO,EAAEqB,OAAOjE,SDiD3G,CAAC,OAAQ,MAAO,MAAO,QAAS,UChDekE,KAAI,SAACC,EAASlE,GACjC,OAAO,4BAAQmE,IAAKnE,EAAGD,MAAOmE,GAAUA,QAIpD,8BAGJ,4BAAQV,QAAS,WACbd,MADJ,c,OC/GpB,SAAS0B,EAAsB5C,GAI3B,OACI,yBAAKpB,UAAU,mBACpB,yBAAKiE,IAAKlE,EAAkBqB,EAAM8C,UAAUtB,YAAauB,IAAI,gBAC7D,kBAAC,IAAD,CAAMC,GAAI,mBAAqBhD,EAAM8C,UAAUlB,IAClC,4BAAK5B,EAAM8C,UAAUT,MACrB,yCAAerC,EAAM8C,UAAUvB,gBAEnC,4BAAQS,QAAU,SAAAb,GAAMnB,EAAMiD,eAAejD,EAAM8C,UAAUlB,MAA7D,WAwDGsB,MAnDf,WAA0B,MAGcjD,IAAMC,SAAS,IAH7B,mBAGfjC,EAHe,KAGH8D,EAHG,OAIS9B,IAAMC,UAAS,GAJxB,mBAIfiD,EAJe,KAIJC,EAJI,OAKUnD,IAAMC,UAAS,GALzB,mBAKfmD,EALe,KAKLvB,EALK,KAQlBqB,GACA7F,EAAsByE,EAAeqB,GACtCC,GACCvB,GAAY,GAGhB,IAAIwB,EAAkB,SAAA1B,GAElB3D,EAAWsF,OAAOtF,EAAWuF,WAAU,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,KAAK,GAE1D5D,EAAsBC,EAAY6D,IAGtC,OACI,6BACA,6BACI,kCACA,yBAAKe,IAAI,aACT,mCAGJ,yBAAKjE,UAAU,WACX,yBAAKA,UAAU,mBACX,iDACA,yBAAKA,UAAU,iBAEY,IAAtBX,EAAWQ,QAAgB,uDAE3BR,EAAWwE,KAAI,SAACgB,EAAEjF,GACf,OAAQ,kBAACoE,EAAD,CAAuBD,IAAKnE,EAAGsE,UAAWW,EAAGR,eAAkBK,QAK3F,yBAAK1E,UAAU,aACC,kBAAC,EAAD,CAAmBX,WAAYA,EAAY8D,cAAeA,EAAeD,YAAaA,S,OCzD3F4B,MAbf,WAMI,OACI,6BACI,4BAAQ9E,UAAU,QAAQoD,QAAS,WALvC2B,OAAOC,SAAS,EAAG,KAKf,eCCZC,IAAMC,cAAc,SAEpB,IAAIC,EAAY,CAAC,SAAU,SAAU,QAErC,SAASC,EAAgBhE,GAErB,IAAI8C,EAAY9C,EAAM8C,UAElBmB,EAAW,SAACC,GACZpB,EAAUqB,IAAMxC,SAASuC,GACzBlE,EAAMoE,iBAAiBtB,IANA,EA8BO7C,IAAMC,UAAS,GA9BtB,mBA8BpBW,EA9BoB,KA8BTC,EA9BS,KA+BvBuD,EAAY,WACZvD,GAAa,IAEbG,EAAa,WAAQH,GAAa,IAlCX,EAoCqBb,IAAMC,UAAS,GApCpC,mBAoCpBoE,EApCoB,KAoCFC,EApCE,KAqCvBC,EAAmB,WAAQD,GAAoB,IAC/CE,EAAoB,WAAQF,GAAoB,IAChDG,EAAmB,SAAAvD,GACnBnB,EAAM2E,eAAexD,IAxCE,EA4CKlB,IAAMC,UAAS,GA5CpB,mBA4CpB0E,EA5CoB,KA4CVC,EA5CU,KAuD3B,OACI,yBAAKjG,UAAU,mBACX,6BACA,kBAAC,IAAD,CAAMoE,GAAI,KAAK,yBAAK8B,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAMC,QAAQ,MAAMC,KAAK,OAAOC,EAAE,oBAAmB,0BAAMA,EAAE,wKAA/J,KACA,yBAAKvC,IAAI,mBACL,uBAAGjE,UAAU,aAAY,yBAAKkG,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAMC,QAAQ,MAAMC,KAAK,OAAOC,EAAE,oBAAmB,0BAAMA,EAAE,0KAE7K,yBAAKxG,UAAU,aACX,yBAAKmE,IAAK,kBAAmBF,IAAKlE,EAAkBmE,EAAUtB,cAC9D,yBAAK5C,UAAU,QACX,6BACI,gCAAMkE,EAAUT,KAAhB,KACA,kCAAQS,EAAUuC,QAEtB,2BAAIvC,EAAUvB,iBAGtB,yBAAK3C,UAAU,KAAKoD,QAAS,SAAAb,GAAMkD,MACnC,mCAASvB,EAAUqB,GAAnB,IAAwBrB,EAAUwC,OAASxC,EAAUyC,aAArD,IAAqEzC,EAAUyC,aAAe,GAAK,kCAAQzC,EAAUyC,aAAlB,KAAnG,KACA,yBAAK3G,UAAU,UAAU4G,MAAQZ,EAAW,CAACG,MAA8F,KAAvF,GAAMjC,EAAUqB,GAAKrB,EAAUwC,SAASxC,EAAUwC,OAASxC,EAAUyC,eAAwB,KAAO,CAACR,MAAQjC,EAAUqB,GAAGrB,EAAUwC,OAAU,IAAM,MAAxM,KACA,yBAAK1G,UAAU,cAAc4G,MAAQZ,EAAW,CAACG,OAASjC,EAAUqB,GAAKrB,EAAUwC,SAASxC,EAAUwC,OAASxC,EAAUyC,cAAiB,IAAM,KAAO,MAItJzC,EAAU2C,IAAM3C,EAAU4C,QAAU,4BAAQ9G,UAAU,QAAQoD,QAAS,SAAAb,GAAMqD,MAAzC,aACrC,yBAAK5F,UAAU,KAAKoD,QAAS,SAAAb,GAAMkD,MACnC,yBAAKzF,UAAU,UAAU4G,MAAO,CAACT,MAAQjC,EAAU2C,GAAG3C,EAAU4C,OAAU,IAAM,MAChF,mCAAS5C,EAAU2C,GAAnB,IAAwB3C,EAAU4C,UAGN,UAAtB1F,EAAM2F,aACJ,yBAAK/G,UAAU,QACX,4BAAQA,UAAU,SAASoD,QAAS,kBAAM0C,EAAiB,WAA3D,SACA,4BAAQ1C,QAAS,kBAAM0C,EAAiB,eAAxC,aACA,4BAAQ1C,QAAS,kBAAM0C,EAAiB,YAAxC,WAGgB,cAAtB1E,EAAM2F,aACJ,yBAAK/G,UAAU,QACX,4BAAQoD,QAAS,kBAAM0C,EAAiB,WAAxC,SACA,4BAAQ9F,UAAU,SAASoD,QAAS,kBAAM0C,EAAiB,eAA3D,aACA,4BAAQ1C,QAAS,kBAAM0C,EAAiB,YAAxC,WAGgB,WAAtB1E,EAAM2F,aACJ,yBAAK/G,UAAU,QACX,4BAAQoD,QAAS,kBAAM0C,EAAiB,WAAxC,SACA,4BAAQ1C,QAAS,kBAAM0C,EAAiB,eAAxC,aACA,4BAAQ9F,UAAU,SAASoD,QAAS,kBAAM0C,EAAiB,YAA3D,WAIZ,kBAAC,IAAD,CACIzC,OAAQpB,EACRqB,eAAgB,kBAAMjB,KACtBkB,2BAA2B,EAC3BvD,UAAU,sBAEN,4BAAQA,UAAU,aAAaoD,QAAS,kBAAIf,MAAc,yBAAK6D,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAME,KAAK,OAAOC,EAAE,oBAAmB,0BAAMA,EAAE,sRAC5L,yCACA,yBAAKxG,UAAU,YACdkE,EAAUqB,GAAKrB,EAAUwC,OAASxC,EAAUyC,cAAgB,4BAAQ3G,UAAU,WAAWoD,QAAS,kBAAKiC,EAAUnB,EAAUwC,OAASxC,EAAUyC,aAAgBzC,EAAUqB,MAA5G,wBACzD,yBAAKvF,UAAU,MACX,mCAASkE,EAAUqB,GAAnB,IAAwBrB,EAAUwC,OAASxC,EAAUyC,aAArD,IAAqEzC,EAAUyC,aAAe,GAAK,kCAAQzC,EAAUyC,aAAlB,KAAnG,KACA,yBAAK3G,UAAU,UAAU4G,MAAQZ,EAAW,CAACG,MAA8F,KAAvF,GAAMjC,EAAUqB,GAAKrB,EAAUwC,SAASxC,EAAUwC,OAASxC,EAAUyC,eAAwB,KAAO,CAACR,MAAQjC,EAAUqB,GAAGrB,EAAUwC,OAAU,IAAM,OACxM,yBAAK1G,UAAU,cAAc4G,MAAQZ,EAAW,CAACG,OAASjC,EAAUqB,GAAKrB,EAAUwC,SAASxC,EAAUwC,OAASxC,EAAUyC,cAAiB,IAAM,KAAO,MAE1JzC,EAAU2C,IAAM3C,EAAU4C,QAAU,4BAAQ9G,UAAU,sBAAsBoD,QAAS,SAAAb,GAAMqD,MAAvD,aACrC,yBAAK5F,UAAU,MACX,yBAAKA,UAAU,UAAU4G,MAAO,CAACT,MAAQjC,EAAU2C,GAAG3C,EAAU4C,OAAU,IAAM,MAChF,mCAAS5C,EAAU2C,GAAnB,IAAwB3C,EAAU4C,WAK1C,kBAACE,GAAD,CAAcC,YA1GZ,SAAA3B,GACdpB,EAAU4C,QAAWxB,EACrBlE,EAAMoE,iBAAiBtB,IAwG6BgD,SA/GzC,SAAC5B,GACZpB,EAAU2C,IAAMvB,EAChBlE,EAAMoE,iBAAiBtB,IA6GiDiD,YAzH1D,SAAC7B,GACfpB,EAAUwC,QAAU3D,SAASuC,GAC7BlE,EAAMoE,iBAAiBtB,IAuH2EmB,SAAUA,EAAU+B,kBApHlG,SAAC9B,GACrBpB,EAAUyC,cAAgB5D,SAASuC,GACnClE,EAAMoE,iBAAiBtB,IAkHqImD,cApF5I,SAACC,EAAUC,GAEvBtB,EADDqB,EAAW,GAAKA,GAAYC,IAmF2JrD,UAAW9C,EAAM8C,aAIvM,kBAAC,IAAD,CACIb,OAAQqC,EACRpC,eAAgB,kBAAMuC,KACtB7F,UAAU,oBAGV,kBAACwH,GAAD,CAActD,UAAWA,EAAWsB,iBAAkBpE,EAAMoE,iBAAkBnD,WAAYwD,MAO1G,SAAS2B,GAAapG,GAAO,IAAD,EAEkBC,IAAMC,SAAS,GAFjC,mBAEjBmG,EAFiB,KAEFC,EAFE,OAGkBrG,IAAMC,SAAS,GAHjC,mBAGjBqG,EAHiB,KAGFC,EAHE,KAsBxB,OACI,yBAAK5H,UAAU,gBACX,4BAAQA,UAAU,aAAaoD,QAAS,kBAAIhC,EAAMiB,eAAc,yBAAK6D,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAME,KAAK,OAAOC,EAAE,oBAAmB,0BAAMA,EAAE,sRAClM,+CAEkB,IAAjBmB,GAAuB,2CAAiBvG,EAAM8C,UAAUwC,OAAjC,MAA4CiB,EAA5C,MAA8D5E,SAAS3B,EAAM8C,UAAUwC,QAAQ3D,SAAS4E,GAAxG,KACN,IAAjBA,GAAuB,2CAAiBvG,EAAM8C,UAAUwC,OAAjC,UAAgDtF,EAAM8C,UAAUwC,QACxF,2BAAO1G,UAAU,eAAewD,KAAK,SAASE,YAAa,iBAAkB/D,MAAOgI,EAAehE,SAAU,SAAApB,GAAMqF,EAAiBrF,EAAEqB,OAAOjE,UAG3H,IAAjB8H,GAAuB,2CAAiBrG,EAAM8C,UAAU4C,OAAjC,MAA4Ca,EAA5C,MAA8D5E,SAAS3B,EAAM8C,UAAU4C,QAAQ/D,SAAS0E,GAAxG,KACN,IAAjBA,GAAuB,2CAAiBrG,EAAM8C,UAAU4C,OAAjC,UAAgD1F,EAAM8C,UAAU4C,QACxF,2BAAO9G,UAAU,cAAcwD,KAAK,SAASE,YAAa,iBAAkB/D,MAAO8H,EAAe9D,SAAU,SAAApB,GAAMmF,EAAiBnF,EAAEqB,OAAOjE,UAC5I,qFACA,4BAAQyD,QAAS,SAAAb,GA7BrBnB,EAAM8C,UAAUuC,QAChBrF,EAAM8C,UAAU2C,IAAMzF,EAAM8C,UAAU4C,OAGtC1F,EAAM8C,UAAU4C,QAAU/D,SAAS0E,GACnCrG,EAAM8C,UAAUwC,QAAU3D,SAAS4E,GACnCvG,EAAM8C,UAAUqB,IAAMxC,SAAS4E,GAE/BvG,EAAMoE,iBAAiBpE,EAAM8C,WAG1B9C,EAAM8C,UAAU2C,GAAKzF,EAAM8C,UAAU4C,QACpC1F,EAAMiB,eAiBN,WAKZ,SAAS2E,GAAa5F,GAAQ,IAAD,EACiBC,IAAMC,SAAS,GADhC,mBAClBuG,EADkB,KACHC,EADG,OAEuBzG,IAAMC,SAAS,GAFtC,mBAElByG,EAFkB,KAEAC,EAFA,OAGmC3G,IAAMC,SAAS,GAHlD,mBAGlB2G,EAHkB,KAGMC,EAHN,OAIiB7G,IAAMC,SAAS,GAJhC,mBAIlB6G,EAJkB,KAIHC,EAJG,OAKuB/G,IAAMC,SAAS,GALtC,mBAKlB+G,EALkB,KAKAC,EALA,KAOrBjD,EAAW,SAAAC,GACU,IAAlBuC,IACIzG,EAAM8C,UAAUqB,GAAKsC,EAAcvC,GAAO,EACzClE,EAAMiE,SAASjE,EAAM8C,UAAUqB,GAAID,GAGnClE,EAAMiE,SAASwC,EAAcvC,GAEjClE,EAAMiG,cAAejG,EAAM8C,UAAUqB,GAAKnE,EAAM8C,UAAUwC,OAAStF,EAAM8C,UAAUyC,gBAIvFQ,EAAc,SAAA7B,GACU,IAArByC,IACI3G,EAAM8C,UAAUwC,OAASqB,EAAiBzC,GAAO,EAChDlE,EAAMiE,UAAUjE,EAAM8C,UAAUwC,OAAQ,GAAIpB,GAGhDlE,EAAM+F,YAAYY,EAAiBzC,GAEnClE,EAAMiG,cAAejG,EAAM8C,UAAUqB,GAAKnE,EAAM8C,UAAUwC,OAAStF,EAAM8C,UAAUyC,gBAIvFS,EAAoB,SAAA9B,IACR,IAATA,GACClE,EAAMgG,mBAAoBhG,EAAM8C,UAAUyC,cAC1CvF,EAAMiG,cAAejG,EAAM8C,UAAUqB,GAAKnE,EAAM8C,UAAUwC,OAAStF,EAAM8C,UAAUyC,cAChFvF,EAAM8C,UAAUqB,GAAKnE,EAAM8C,UAAUwC,QACpCtF,EAAMiE,UAA0D,GAAhDjE,EAAM8C,UAAUqB,GAAKnE,EAAM8C,UAAUwC,UAI1B,IAA3BuB,IAEA7G,EAAM8C,UAAUyC,aAAesB,EAAuB3C,GAAO,GAC1DlE,EAAM8C,UAAUqB,GAAKnE,EAAM8C,UAAUwC,SAAWtF,EAAM8C,UAAUyC,cAC/DvF,EAAMiE,SAASjE,EAAM8C,UAAUyC,aAAarB,GAEhDlE,EAAMgG,kBAAkBhG,EAAM8C,UAAUyC,aAAarB,MAIlDlE,EAAM8C,UAAUqB,KAAOnE,EAAM8C,UAAUwC,OAAStF,EAAM8C,UAAUyC,cAAgBrB,EAAM,IACrFlE,EAAMiE,SAAS4C,EAAuB3C,GAI1ClE,EAAMgG,kBAAkBa,EAAuB3C,IAEnDlE,EAAMiG,cAAejG,EAAM8C,UAAUqB,GAAKnE,EAAM8C,UAAUwC,OAAStF,EAAM8C,UAAUyC,gBAGvFO,EAAW,SAAA5B,GACU,IAAlB6C,GACC/G,EAAM8F,SAASiB,EAAc7C,IAIjC2B,EAAc,SAAA3B,GACU,IAArB+C,GACCjH,EAAM6F,YAAYoB,EAAiB/C,IAI3C,OAEI,yBAAKtF,UAAU,YAIX,yBAAKA,UAAU,yBACX,2CAAiBoB,EAAM8C,UAAUqB,GAAjC,KACA,yBAAKvF,UAAU,eACX,4BAAQoD,QAAS,SAAAb,GAAO8C,GAAU,KAAlC,KACA,2BAAOrF,UAAU,eAAewD,KAAK,SAAS7D,MAAOkI,EAAelE,SAAU,SAAApB,GAC1E,IAAIgG,EAAIhG,EAAEqB,OAAOjE,MACd4I,GAAK,GACJT,EAAkBS,MAE1B,4BAAQnF,QAAS,SAAAb,GAAO8C,EAAS,KAAjC,OAIR,yBAAKrF,UAAU,yBACX,uCAAaoB,EAAM8C,UAAUwC,OAA7B,KACA,yBAAK1G,UAAU,eACX,4BAAQoD,QAAS,SAAAb,GAAO4E,GAAa,KAArC,KACA,2BAAOnH,UAAU,eAAewD,KAAK,SAAS7D,MAAOoI,EAAkBpE,SAAU,SAAApB,GAC7E,IAAIgG,EAAIhG,EAAEqB,OAAOjE,MACd4I,GAAK,GACJP,EAAoBO,MAE5B,4BAAQnF,QAAS,SAAAb,GAAO4E,EAAY,KAApC,OAIR,yBAAKnH,UAAU,yBACP,gDAAsBoB,EAAM8C,UAAUyC,aAAtC,IAAqDvF,EAAM8C,UAAUyC,aAAe,GAAK,4BAAQ3G,UAAU,cAAaoD,QAAS,SAAAb,GAAO6E,GAAmB,KAAlE,WAC7F,yBAAKpH,UAAU,eACX,4BAAQoD,QAAS,SAAAb,GAAO6E,GAAmB,KAA3C,KACA,2BAAOpH,UAAU,gBAAgBwD,KAAK,SAAS7D,MAAOsI,EAAwBtE,SAAU,SAAApB,GACpF,IAAIgG,EAAIhG,EAAEqB,OAAOjE,MACd4I,GAAK,GACJL,EAA0BK,MAElC,4BAAQnF,QAAS,SAAAb,GAAO6E,EAAkB,KAA1C,OASR,yBAAKpH,UAAU,yBACX,2CAAiBoB,EAAM8C,UAAU2C,IACjC,yBAAK7G,UAAU,eACX,4BAAQoD,QAAS,SAAAb,GAAO2E,GAAU,KAAlC,KACA,2BAAOlH,UAAU,cAAcwD,KAAK,SAAS7D,MAAOwI,EAAexE,SAAU,SAAApB,GACjEA,EAAEqB,OAAOjE,OACT,GACJyI,EAAiB7F,EAAEqB,OAAOjE,UAElC,4BAAQyD,QAAS,SAAAb,GAAO2E,EAAS,KAAjC,OAGR,yBAAKlH,UAAU,yBACX,uCAAaoB,EAAM8C,UAAU4C,QAC7B,yBAAK9G,UAAU,eACX,4BAAQoD,QAAS,SAAAb,GAAO0E,GAAa,KAArC,KACA,2BAAOjH,UAAU,cAAcwD,KAAK,SAASE,YAAY,iBAAiB/D,MAAO0I,EAAkB1E,SAAU,SAAApB,GACjGA,EAAEqB,OAAOjE,OACT,GACJ2I,EAAoB/F,EAAEqB,OAAOjE,UAErC,4BAAQyD,QAAS,SAAAb,GAAO0E,EAAY,KAApC,QAOpB,SAASuB,GAAapH,GAAO,IAAD,EAEUC,IAAMC,UAAS,GAFzB,mBAEjBW,EAFiB,KAENC,EAFM,KAQpBG,EAAa,WACbH,GAAa,IAGbuG,EAAkB,SAAAnD,GAClBlE,EAAM8C,UAAUwE,WAAWC,MAAK,SAAAC,GAAC,OAAIA,EAAEnF,OAASrC,EAAMyH,UAAUpF,QAAMgD,OAASnB,EAC/ElE,EAAMoE,iBAAiBpE,EAAM8C,YAI7B4E,EAAWC,KAAKC,OAAO5H,EAAMyH,UAAUpC,MAAM,IAAM,GAEvD,OACI,yBAAKzG,UAAU,gBACX,kBAAC,IAAD,CACIqD,OAAQpB,EACRqB,eAAgB,kBAAMjB,KACtBkB,2BAA2B,EAC3BvD,UAAU,uBAEV,4BAAQA,UAAU,aAAaoD,QAAS,kBAAMf,MAAc,yBAAK6D,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAME,KAAK,OAAOC,EAAE,oBAAmB,0BAAMA,EAAE,sRAC9L,4BAAKpF,EAAMyH,UAAUpF,MACpBqF,GAAY,GAAK,0CAAgBA,GACjCA,EAAW,GAAM,yCAAeA,GACrC,6BACI,4BAAQ1F,QAAS,kBAAMqF,GAAiB,KAAxC,MACC,2BAAIrH,EAAMyH,UAAUpC,OAErB,4BAAQrD,QAAS,kBAAMqF,EAAgB,KAAvC,QAGJ,yBAAKzI,UAAU,WAAWoD,QAAS,WAlCvClB,GAAa,KAmCL,yBAAKlC,UAAU,gBAAgBiE,IAAK1D,EAAiBa,EAAMyH,UAAUpF,QACpEqF,GAAY,GAAK,6BAAK,2BAAI1H,EAAMyH,UAAUpC,OAAzB,IAAoC,+BAAKqC,IAC1DA,EAAW,GAAM,6BAAK,2BAAI1H,EAAMyH,UAAUpC,OAAzB,IAAoC,2BAAIqC,MAO1E,SAASG,GAAS7H,GAAO,IAAD,EAEcC,IAAMC,UAAS,GAF7B,mBAEbW,EAFa,KAEFC,EAFE,KAIhBuD,EAAY,WACZvD,GAAa,IAGbG,EAAa,WACbH,GAAa,IAGbuG,EAAkB,SAAAnD,GAElBlE,EAAM8C,UAAUgF,MAAMP,MAAK,SAAAC,GAAC,OAAIA,EAAEnF,OAASrC,EAAM+H,KAAK1F,QAAMgD,OAASnB,EACrElE,EAAMoE,iBAAiBpE,EAAM8C,YASjC,OACI,yBAAKlE,UAAU,iBACX,yBAAKoD,QAAS,kBAAMqC,MACpB,2BAAIrE,EAAM+H,KAAK1F,KAAf,KAAyB,uBAAGL,QAAS,kBAAMqC,MAAlB,QAAqCrE,EAAM+H,KAAK1C,QAEzE,kBAAC,IAAD,CACIpD,OAAQpB,EACRqB,eAAgB,kBAAMjB,KACtBkB,2BAA2B,EAC3BvD,UAAU,uBAGV,4BAAQA,UAAU,aAAaoD,QAAS,kBAAMf,MAAc,yBAAK6D,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAME,KAAK,OAAOC,EAAE,oBAAmB,0BAAMA,EAAE,sRAE9L,4BAAKpF,EAAM+H,KAAK1F,MAC5B,4BAAKrC,EAAM+H,KAAK3F,MACJ,yBAAKxD,UAAU,eACX,4BAAQoD,QAAS,kBAAMqF,GAAiB,KAAxC,MACA,2BAAIrH,EAAM+H,KAAK1C,OACf,4BAAQrD,QAAS,kBAAMqF,EAAgB,KAAvC,OAEJ,4BAAQzI,UAAU,aAAaoD,QAAS,kBA1BhDhC,EAAM8C,UAAUgF,MAAMvE,OAAOvD,EAAM8C,UAAUgF,MAAMtE,WAAU,SAAAgE,GAAC,OAAIA,EAAEnF,OAASrC,EAAM+H,KAAK1F,QAAO,GAC/FrC,EAAMoE,iBAAiBpE,EAAM8C,gBAC7B7B,MAwBQ,iBAQhB,SAAS+G,GAAMhI,GAAM,IJ/RQzC,EI+RR,EAGqB0C,IAAMC,SAAS,IAHpC,mBAGV+H,EAHU,KAGGC,EAHH,OAIqBjI,IAAMC,SAAS,SAJpC,mBAIViI,EAJU,KAIGC,EAJH,OAKuBnI,IAAMC,SAAS,GALtC,mBAKVmI,EALU,KAKIC,EALJ,OAMiBrI,IAAMC,UAAS,GANhC,mBAMVW,EANU,KAMCC,EAND,OAOyBb,IAAMC,SAAS,IAPxC,mBAOVa,EAPU,KAOKC,EAPL,OASiBf,IAAMC,SAAS,IAThC,mBASVxB,EATU,KASC6J,EATD,OAU6BtI,IAAMC,UAAS,GAV5C,mBAUVsI,EAVU,KAUOC,EAVP,KAaO,IAArB/J,EAAUD,SJ5SYlB,EI6SRgL,EJ5SpBnL,EAAGK,OAAO,mBAAmB,SAASA,GACjCA,EAKHL,EAAGM,SAAS,kBAAmB,QAAQ,SAACC,EAAIC,GAC3C,GAAGD,EAAK,MAAMA,EACdJ,EAASM,KAAKC,MAAMF,OANrBR,EAAGW,UAAU,kBAAmBF,KAAKM,UAAU,CAAC,QAAS,WAAY,UAAW,QAAQ,SAAAR,GACvF,GAAGA,EAAK,MAAMA,SI4Sd,IACIsD,EAAa,WACbD,EAAiB,IACjBF,GAAa,IApBA,EAwBuBb,IAAMC,SAAS,IAxBtC,mBAwBVwI,EAxBU,KAwBIC,EAxBJ,KAyBbC,EAAgB5I,EAAM8C,UAAUgF,MACpC,GAAoB,KAAjBY,EAAoB,CAEnB,IAAIG,EAAO,CAAC,OAAQ,QAEpBD,EAAgBA,EAAcE,QAAO,SAAAC,GACjC,IAAIC,GAAc,EAMlB,OALAH,EAAKI,SAAQ,SAAAtG,IACkE,IAAxEoG,EAAMpG,GAAK9D,cAAcqK,QAAQR,EAAaS,uBAC7CH,GAAc,MAGfA,KAKfJ,EAAcQ,MAAK,SAACC,EAAOC,GACvB,OAAGD,EAAMhH,KAAOiH,EAAMjH,KACX,EACHiH,EAAMjH,KAAOgH,EAAMhH,MACf,EAGD,KAKf,IAAIkH,EAAa,WAGbvI,EAAiB,IAEjB,IJpXsCoB,EIoXlCoH,GAAe,EACfC,EAAU,GAed,GAdmB,KAAhBxB,IACCuB,GAAe,EACfC,EAAQ5H,KAAK,sBAEE,KAAhBsG,IACCqB,GAAe,EACfC,EAAQ5H,KAAK,sBAEdwG,EAAe,IACdmB,GAAe,EACfC,EAAQ5H,KAAK,uBAEjBb,EAAiByI,GAEdD,EAAa,CAEZ,IAAIE,GJtY8BtH,EIsY8B+F,EJrYvD,CACnB9F,KIoY+C4F,EJnY/C5C,MAAO1D,SImYqD0G,GJlY5DjG,KAAMA,EACNuH,SAAU,SI6YA,GAVA3J,EAAM8C,UAAUgF,MAAMjG,KAAK6H,GAC3B1J,EAAMoE,iBAAiBpE,EAAM8C,WAG7BoF,EAAe,IACfE,EAAe,SACfE,EAAgB,GAChBG,GAAmB,GAGhBD,IACwC,IAApC9J,EAAUwK,QAAQf,GAAoB,CACrC,IAAIhC,EAAOzH,EACXyH,EAAKtE,KAAKsG,GACVI,EAAapC,GJ7W1B,SAAP,2BI8WoByD,CAAqBlL,GAK7BuC,MAaR,OACI,yBAAKrC,UAAU,cACX,yBAAKA,UAAY,aAEhBoB,EAAM8C,UAAUwE,WAAW7E,KAAI,SAACgF,EAAWoC,GACxC,OAAO,kBAAEzC,GAAF,CAAezE,IAAKkH,EAAGpC,UAAWA,EAAW3E,UAAW9C,EAAM8C,UAAWsB,iBAAkBpE,EAAMoE,uBAG5G,4BAAQxF,UAAU,aAAaoD,QAAS,WAvGxBlB,GAAa,KAuG7B,KAGA,yBAAKlC,UAAU,cAAckG,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAME,KAAK,OAAOC,EAAE,oBAAmB,0BAAMA,EAAE,wTAC1J,2BAAOxG,UAAU,YAAYwD,KAAK,OAAOE,YAAa,8BAA+BC,SAAU,SAAApB,GAAMwH,EAAgBxH,EAAEqB,OAAOjE,UAC7HqK,EAAcnG,KAAI,SAACsF,EAAMvJ,GACtB,OAAO,kBAAEqJ,GAAF,CAAWlF,IAAKnE,EAAGuJ,KAAMA,EAAMjF,UAAW9C,EAAM8C,UAAWsB,iBAAkBpE,EAAMoE,sBAI9F,kBAAC,EAAD,MAGA,kBAAC,IAAD,CACInC,OAAUpB,EACVqB,eAAkB,kBAAMjB,KACxBkB,2BAA2B,EAC3BvD,UAAU,sBACb,4BAAQA,UAAU,aAAaoD,QAAS,kBAAIf,MAAc,yBAAK6D,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAME,KAAK,OAAOC,EAAE,oBAAmB,0BAAMA,EAAE,sRACzL,+CACA,8BACI,wCACA,2BAAOhD,KAAK,OAAOE,YAAY,YAAYC,SAAU,SAAApB,GAAM+G,EAAe/G,EAAEqB,OAAOjE,UACnF,oCAEEiK,GAEM,4BAAQnG,KAAK,OAAOE,SAAU,SAAApB,GA5CjC,IAAA2I,EACR,aADQA,EA4CsD3I,EAAEqB,OAAOjE,QA1C5EkK,GAAmB,GACnBL,EAAe,UAEfA,EAAe0B,KAwCMpL,EAAU+D,KAAI,SAACsH,EAAIvL,GAChB,OAAO,4BAAQmE,IAAKnE,EAAGD,MAAOwL,GAAKA,MAEvC,4BAAQxL,MAAM,WAAd,iBAGXiK,GAEO,2BAAOpG,KAAK,OAAOE,YAAY,cAAcC,SAAU,SAAApB,GAAMiH,EAAejH,EAAEqB,OAAOjE,UAG7F,yCACA,2BAAO6D,KAAK,SAASE,YAAY,aAAaC,SAAU,SAAApB,GAAMmH,EAAgBnH,EAAEqB,OAAOjE,WAE3F,4BAAQyD,QAAW,kBAAMuH,MAAzB,aACCxI,EAAc0B,KAAI,SAACuH,EAAKxL,GACrB,OAAO,uBAAGmE,IAAKnE,GAAR,KAAcwL,EAAd,WAS3B,SAASC,GAASjK,GAAO,IAAD,EAEcC,IAAMC,UAAS,GAF7B,mBAEbW,EAFa,KAEFC,EAFE,OAIIb,IAAMC,SAASF,EAAMkK,KAAK7H,MAJ9B,mBAIbA,EAJa,KAIP8H,EAJO,OAKIlK,IAAMC,SAASF,EAAMkK,KAAKE,MAL9B,mBAKbA,EALa,KAKPC,EALO,OAMQpK,IAAMC,SAASF,EAAMkK,KAAKI,QANlC,mBAMbA,EANa,KAMLC,EANK,OAOItK,IAAMC,SAASF,EAAMkK,KAAKM,MAP9B,mBAObA,EAPa,KAOPC,EAPO,OAQIxK,IAAMC,SAASF,EAAMkK,KAAK9H,MAR9B,mBAQbA,EARa,KAQPsI,EARO,OAUsBzK,IAAMC,SAAS,IAVrC,mBAUba,EAVa,KAUEC,EAVF,KAchBC,EAAa,WAGbD,EAAiB,IAEjB,IAAIwI,GAAe,EACfC,EAAU,GAed,GAdY,KAATpH,IACCmH,GAAe,EACfC,EAAQ5H,KAAK,sBAEL,KAATuI,IACCZ,GAAe,EACfC,EAAQ5H,KAAK,sBAEdyI,GAAU,IACTd,GAAe,EACfC,EAAQ5H,KAAK,wBAEjBb,EAAiByI,GAEdD,EAAa,CAEZ,IAAImB,EAAQvM,EAAuB4B,EAAM8C,UAAU8H,UAAW,OAAQ5K,EAAMkK,KAAK7H,MAEjFrC,EAAM8C,UAAU8H,UAAUD,GAAOtI,KAAOA,EACxCrC,EAAM8C,UAAU8H,UAAUD,GAAOP,KAAOA,EACxCpK,EAAM8C,UAAU8H,UAAUD,GAAOL,OAASA,EAC1CtK,EAAM8C,UAAU8H,UAAUD,GAAOH,KAAOA,EACxCxK,EAAM8C,UAAU8H,UAAUD,GAAOvI,KAAOA,EAExCpC,EAAMoE,iBAAiBpE,EAAM8C,WAE7BhC,GAAa,KAUrB,OACI,yBAAKlC,UAAU,iBACX,uBAAGoD,QAAS,WA9CIlB,GAAa,KA8C7B,SAAuCd,EAAMkK,KAAK7H,KAAlD,KACA,kBAAC,IAAD,CACIJ,OAAQpB,EACRqB,eAAgB,kBAAMjB,KACtBkB,2BAA2B,EAC3BvD,UAAU,SAEV,2BAAOwD,KAAK,OAAOE,YAAa,OAAQ/D,MAAO8D,EAAME,SAAU,SAAApB,GAAMgJ,EAAQhJ,EAAEqB,OAAOjE,UAN1F,IAM4G,6BACxG,2BAAO6D,KAAK,OAAOE,YAAa,OAAQ/D,MAAO6L,EAAM7H,SAAU,SAAApB,GAAMkJ,EAAQlJ,EAAEqB,OAAOjE,UAP1F,IAO4G,6BACxG,2BAAO6D,KAAK,SAASE,YAAa,SAAU/D,MAAO+L,EAAQ/H,SAAU,SAAApB,GAAMoJ,EAAUpJ,EAAEqB,OAAOjE,UARlG,IAQoH,6BAChH,2BAAO6D,KAAK,OAAOE,YAAa,cAAe/D,MAAOiM,EAAMjI,SAAU,SAAApB,GAAMsJ,EAAQtJ,EAAEqB,OAAOjE,UATjG,IASmH,6BAC/G,4BAAQ8D,KAAK,OAAO9D,MAAO6D,EAAMG,SAAU,SAAApB,GAAMuJ,EAAQvJ,EAAEqB,OAAOjE,SAC7DwF,EAAUtB,KAAI,SAACL,EAAM5D,GAClB,OAAO,4BAAQmE,IAAKnE,EAAGD,MAAO6D,GAAOA,OAEpC,6BAET,4BAAQJ,QAzBH,WACbhC,EAAM8C,UAAU8H,UAAUrH,OAAOvD,EAAM8C,UAAU8H,UAAUpH,WAAU,SAAAgE,GAAC,OAAIA,EAAEnF,OAASrC,EAAMkK,KAAK7H,QAAO,GACvGrC,EAAMoE,iBAAiBpE,EAAM8C,WAC7BhC,GAAa,KAsBL,UAEA,4BAAQkB,QAAS,kBAAMf,MAAvB,QAECF,EAAc0B,KAAI,SAACuH,EAAKxL,GACrB,OAAO,uBAAGmE,IAAKnE,GAAR,KAAcwL,EAAd,WAS3B,SAASa,GAAU7K,GAAO,IAAD,EAEiBC,IAAMC,SAAS,IAFhC,mBAEd4K,EAFc,KAEDC,EAFC,OAGiB9K,IAAMC,SAAS,IAHhC,mBAGd8K,EAHc,KAGDC,EAHC,OAIiBhL,IAAMC,SAAS,UAJhC,mBAIdgL,EAJc,KAIDC,EAJC,OAKqBlL,IAAMC,SAAS,GALpC,mBAKdkL,EALc,KAKCC,EALD,OAMiBpL,IAAMC,SAAS,IANhC,mBAMdoL,EANc,KAMDC,EANC,OAQatL,IAAMC,UAAS,GAR5B,mBAQdW,EARc,KAQHC,EARG,OASqBb,IAAMC,SAAS,IATpC,mBASda,EATc,KASCC,EATD,KAajBC,EAAa,WACbD,EAAiB,IACjBF,GAAa,IAIb0K,EAAa,WAGbxK,EAAiB,IAEjB,IJ9kB6CwJ,EAAMpI,EI8kB/CoH,GAAe,EACfC,EAAU,GAed,GAdmB,KAAhBqB,IACCtB,GAAe,EACfC,EAAQ5H,KAAK,sBAEE,KAAhByJ,IACC9B,GAAe,EACfC,EAAQ5H,KAAK,sBAEduJ,GAAiB,IAChB5B,GAAe,EACfC,EAAQ5H,KAAK,wBAEjBb,EAAiByI,GAEdD,EAAa,CAEZ,IAAIiC,GJhmBqCjB,EIgmBqCQ,EJhmB/B5I,EIgmB4C8I,EJ/lBlF,CACnB7I,KI8lB+CyI,EJ7lB/CV,KI6lB4DkB,EJ5lB5DhB,OAAQ3I,SI4lBiEyJ,GJ3lBzEZ,KAAMA,EACNpI,KAAMA,II4lBIpC,EAAM8C,UAAU8H,UAAU/I,KAAK4J,GAC/BzL,EAAMoE,iBAAiBpE,EAAM8C,WAG7BiI,EAAe,IACfE,EAAe,IACfM,EAAe,IACfJ,EAAe,UACfE,EAAiB,GAGjBpK,MAvDa,EA4DmBhB,IAAMC,SAAS,IA5DlC,mBA4DdwI,EA5Dc,KA4DAC,EA5DA,KA6DjB+C,EAAoB1L,EAAM8C,UAAU8H,UACxC,GAAoB,KAAjBlC,EAAoB,CACnB,IAAIG,EAAO,CAAC,OAAQ,OAAQ,OAAQ,QACpC6C,EAAoBA,EAAkB5C,QAAO,SAAAC,GACzC,IAAIC,GAAc,EAMlB,OALAH,EAAKI,SAAQ,SAAAtG,IACkE,IAAxEoG,EAAMpG,GAAK9D,cAAcqK,QAAQR,EAAaS,uBAC7CH,GAAc,MAGfA,KAIf,OACI,yBAAKpK,UAAU,kBAEZ,4BAAQoD,QAlEC,WAAQlB,GAAa,KAkE9B,gBAGC,2BAAOlC,UAAU,YAAYwD,KAAK,OAAOE,YAAa,YAAaC,SAAU,SAAApB,GAAMwH,EAAgBxH,EAAEqB,OAAOjE,UAC3GmN,EAAkBjJ,KAAI,SAACyH,EAAM1L,GAC1B,OAAO,kBAACyL,GAAD,CAAUtH,IAAKnE,EAAG0L,KAAMA,EAAMpH,UAAW9C,EAAM8C,UAAWsB,iBAAkBpE,EAAMoE,sBAI7F,kBAAC,EAAD,MAGA,kBAAC,IAAD,CACInC,OAAUpB,EACVqB,eAAkB,kBAAMjB,KACxBkB,2BAA2B,EAC3BvD,UAAU,SAEV,8BACI,2BAAOwD,KAAK,OAAOE,YAAY,YAAYC,SAAU,SAAApB,GAAM4J,EAAe5J,EAAEqB,OAAOjE,UACnF,2BAAO6D,KAAK,OAAOE,YAAY,cAAcC,SAAU,SAAApB,GAAM8J,EAAe9J,EAAEqB,OAAOjE,UACrF,2BAAO6D,KAAK,SAASE,YAAY,SAASC,SAAU,SAAApB,GAAMkK,EAAiBlK,EAAEqB,OAAOjE,UACpF,2BAAO6D,KAAK,OAAOE,YAAY,OAAOC,SAAU,SAAApB,GAAMoK,EAAepK,EAAEqB,OAAOjE,UAC9E,4BAAQ8D,KAAK,OAAO9D,MAAO2M,EAAa3I,SAAU,SAAApB,GAAMgK,EAAehK,EAAEqB,OAAOjE,SAC3EwF,EAAUtB,KAAI,SAACL,EAAM5D,GAClB,OAAO,4BAAQmE,IAAKnE,EAAGD,MAAO6D,GAAOA,QAIjD,4BAAQJ,QAAW,kBAAMwJ,MAAzB,OACA,4BAAQxJ,QAAS,kBAAMf,MAAvB,SAECF,EAAc0B,KAAI,SAACuH,EAAKxL,GACrB,OAAO,uBAAGmE,IAAKnE,GAAR,KAAcwL,EAAd,WAQ3B,SAAS2B,GAAW3L,GAAQ,IAAD,EAEWC,IAAMC,UAAS,GAF1B,mBAEhBW,EAFgB,KAELC,EAFK,KAInBG,EAAa,WAAQH,GAAa,IAElCuG,EAAkB,SAACnD,EAAK0H,GACxB5L,EAAM8C,UAAU+I,QAAQtE,MAAK,SAAAC,GAAC,OAAIA,EAAEnF,OAASrC,EAAM8L,OAAOzJ,QAAMuJ,IAAO1H,EACvElE,EAAMoE,iBAAiBpE,EAAM8C,YAGjC,OACI,yBAAKlE,UAAU,mBACX,yBAAKoD,QAAS,WAVElB,GAAa,KAU7B,UAAyCd,EAAM8L,OAAOzJ,KAAtD,KACuB,MAAtBrC,EAAM8L,OAAOvN,OAAiByB,EAAM8L,OAAOvN,MACtB,MAArByB,EAAM8L,OAAO1J,MAAgB,4CACL,MAAxBpC,EAAM8L,OAAOC,SAAmB,wCAAc/L,EAAM8L,OAAOC,SACrC,MAAtB/L,EAAM8L,OAAOE,OAAiB,sCAAYhM,EAAM8L,OAAOE,OAC7B,MAA1BhM,EAAM8L,OAAOG,WAAqB,0CAAgBjM,EAAM8L,OAAOG,UAA7B,eAAoDjM,EAAM8L,OAAOI,WAEpG,kBAAC,IAAD,CACIjK,OAAUpB,EACVqB,eAAkB,kBAAMjB,KACxBkB,2BAA2B,EAC3BvD,UAAU,SACN,4BAAKoB,EAAM8L,OAAOzJ,MACK,MAAtBrC,EAAM8L,OAAOvN,OACV,6BACI,qCAAWyB,EAAM8L,OAAOvN,MAAxB,KACA,4BAAQyD,QAAS,kBAAMqF,GAAiB,EAAG,WAA3C,KACA,4BAAQrF,QAAS,kBAAMqF,EAAgB,EAAG,WAA1C,MAGiB,MAAxBrH,EAAM8L,OAAOC,SACV,6BACI,uCAAa/L,EAAM8L,OAAOC,QAA1B,KACA,4BAAQ/J,QAAS,kBAAMqF,GAAiB,EAAG,aAA3C,KACA,4BAAQrF,QAAS,kBAAMqF,EAAgB,EAAG,aAA1C,MAGe,MAAtBrH,EAAM8L,OAAOE,OACV,6BACI,qCAAWhM,EAAM8L,OAAOE,OACxB,4BAAQhK,QAAS,kBAAMqF,GAAiB,EAAG,WAA3C,KACA,4BAAQrF,QAAS,kBAAMqF,EAAgB,EAAG,WAA1C,MAGmB,MAA1BrH,EAAM8L,OAAOG,WACV,6BACI,yCAAejM,EAAM8L,OAAOG,WAC5B,4BAAQjK,QAAS,kBAAMqF,GAAiB,EAAG,eAA3C,KACA,4BAAQrF,QAAS,kBAAMqF,EAAgB,EAAG,eAA1C,KACA,yCAAerH,EAAM8L,OAAOI,UAC5B,4BAAQlK,QAAS,kBAAMqF,GAAiB,EAAG,cAA3C,KACA,4BAAQrF,QAAS,kBAAMqF,EAAgB,EAAG,cAA1C,MAGR,4BAAQrF,QAAS,kBAAMf,MAAvB,WAMpB,SAASkL,GAAOnM,GAAM,MAGsBC,IAAMC,SAAS,IAHrC,mBAGXwI,EAHW,KAGGC,EAHH,KAIdyD,EAAiBpM,EAAM8C,UAAU+I,QAErC,GAAoB,KAAjBnD,EAAoB,CAEnB,IAAIG,EAAO,CAAC,QAEZuD,EAAiBA,EAAetD,QAAO,SAAAC,GACnC,IAAIC,GAAc,EAMlB,OALAH,EAAKI,SAAQ,SAAAtG,IACkE,IAAxEoG,EAAMpG,GAAK9D,cAAcqK,QAAQR,EAAaS,uBAC7CH,GAAc,MAGfA,KAIf,OACI,yBAAKpK,UAAU,eAEX,2BAAOwD,KAAK,OAAOE,YAAa,SAAUC,SAAU,SAAApB,GAAMwH,EAAgBxH,EAAEqB,OAAOjE,UAClF6N,EAAe3J,KAAI,SAACqJ,EAAQtN,GACzB,OAAO,kBAACmN,GAAD,CAAYhJ,IAAKnE,EAAGsN,OAAQA,EAAQhJ,UAAW9C,EAAM8C,UAAWsB,iBAAkBpE,EAAMoE,sBAInG,kBAAC,EAAD,OA2EGiI,OAtEf,YAAmC,IAAVC,EAAS,EAATA,MAAS,EAGMrM,IAAMC,SAAS,IAHrB,mBAGvBjC,EAHuB,KAGX8D,EAHW,OAIC9B,IAAMC,UAAS,GAJhB,mBAIvBiD,EAJuB,KAIZC,EAJY,OAKEnD,IAAMC,SAAS,MALjB,mBAKzB4C,EALyB,KAKdyJ,EALc,OAOEtM,IAAMC,UAAS,GAPjB,mBAOvBmD,EAPuB,KAObvB,EAPa,OAUQ7B,IAAMC,SAAS,SAVvB,mBAUvByF,EAVuB,KAUVhB,EAVU,KAY1BP,EAAmB,SAACtB,GACpB,IAAI6H,EAAQvM,EAAuBH,EAAY,KAAM6E,EAAUlB,IAE/D3D,EAAW0M,GAAS7H,EACpB9E,EAAsBC,EAAY6D,GAElCyK,EAAazJ,IAOjB,OAJGO,GACCvB,GAAY,GAGbqB,GAECL,EAAa7E,EAAWsJ,MAAK,SAAA9D,GAAC,OAAIA,EAAE7B,GAAG4K,aAAeF,EAAMG,OAAO7K,MAEhD,UAAhB+D,EAEK,6BACI,kBAAC3B,EAAD,CAAiBlB,UAAWA,EAAW6C,YAAaA,EAAahB,eAAgBA,EAAgBP,iBAAkBA,IACnH,kBAAC4D,GAAD,CAAOlF,UAAWA,EAAWsB,iBAAkBA,KAInC,cAAhBuB,EAEA,6BACI,kBAAC3B,EAAD,CAAiBlB,UAAWA,EAAW6C,YAAaA,EAAahB,eAAgBA,EAAgBP,iBAAkBA,IACnH,kBAACyG,GAAD,CAAW/H,UAAWA,EAAWsB,iBAAkBA,KAIvC,WAAhBuB,EAEA,6BACI,kBAAC3B,EAAD,CAAiBlB,UAAWA,EAAW6C,YAAaA,EAAahB,eAAgBA,EAAgBP,iBAAkBA,IACnH,kBAAC+H,GAAD,CAAQrJ,UAAWA,EAAWsB,iBAAkBA,KAKpD,uDAOR9G,EAAsByE,EAAeqB,GAEjC,oD,SC36BGsJ,OAjDf,WAIE,OAEE,kBAAC,IAAD,KACE,kBAAC,KAAD,KAEE,kBAAC,KAAD,CAAOC,KAAK,sBAAsBC,UAAWP,KAE7C,kBAAC,KAAD,CAAOM,KAAK,KACV,kBAAC,EAAD,UCVUE,QACW,cAA7BlJ,OAAOmJ,SAASC,UAEe,UAA7BpJ,OAAOmJ,SAASC,UAEhBpJ,OAAOmJ,SAASC,SAAST,MACvB,2DCZNU,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,gD,mBCA3CD,EAAOC,QAAU,IAA0B,gD,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.4e63b544.chunk.js","sourcesContent":["//images for character class\r\nimport elfImg from './elf.png'\r\n\r\nimport mageImg from './wizard_color.png'\r\n\r\nimport orcImg from './orc.png'\r\nimport rogueImg from './rogue.png'\r\nimport knightImg from './knight.png'\r\n\r\n//Images for baseStats\r\nimport constitutionImg from './constitution_color.png'\r\nimport intelligenceImg from './Intelligence_color.png'\r\nimport strengthImg from './Strength_color.png'\r\nimport wisdomImg from './wisdom_color.png'\r\nimport charismaImg from './charisma.png'\r\nimport dexterityImg from './dexterity.png'\r\n\r\nvar fs = require('browserify-fs');\r\n\r\nexport function getBaseCharacter(name, initial_max_hp, initial_max_xp, campaign_name, class_name){\r\n    var obj = {\r\n        \"name\": name,\r\n\t\t\"hp\": parseInt(initial_max_hp),\r\n\t\t\"max_hp\": parseInt(initial_max_hp),\r\n\t\t\"temporary_hp\": 0,\r\n        \"level\": 1,\r\n        \"xp\": 0,\r\n        \"max_xp\": parseInt(initial_max_xp),       \r\n\t\t\"campaign_name\": campaign_name,\r\n\t\t\"class_name\": class_name,\r\n\t\t// Currency \r\n\t\t\"copper\": 0,\r\n\t\t\"silver\": 0,\r\n\t\t\"electrum\": 0,\r\n\t\t\"gold\": 0,\r\n\t\t\"platinum\": 0,\r\n\t\t// Other information \r\n\t\t\"core_info\":[\r\n\t\t\t{\"name\": \"Background\" , \"text\": \"Cool background\", \"type\": \"traits\"},\r\n\t\t\t{\"name\": \"Race\" , \"text\": \"Best race\" ,\"type\": \"traits\"},\r\n\r\n\t\t\t{\"name\": \"Proficiency Bonus\" , \"level\": 0 ,\"type\": \"skill\"},\r\n\t\t\t{\"name\": \"Alignment\" , \"text\": \"Everything\" ,\"type\": \"traits\"},\r\n\t\t\t\r\n\t\t\t{\"name\": \"Personality traits\" , \"text\": \"just good ones\" ,\"type\": \"traits\"},\r\n\t\t\t{\"name\": \"Ideals\" , \"text\": \"You can guess\" ,\"type\": \"traits\"},\r\n\t\t\t{\"name\": \"Bonds\" , \"text\": \"Who knows\" ,\"type\": \"traits\"},\r\n\t\t\t{\"name\": \"Flaws\" , \"text\": \"None\" ,\"type\": \"traits\"},\r\n\t\t],\r\n\t\t\"base_stats\" : [\r\n            { \"name\": \"strength\", \"level\": 10 },\r\n            { \"name\": \"dexterity\", \"level\": 10  },\r\n            { \"name\": \"constitution\", \"level\": 10 },\r\n            { \"name\": \"intelligence\", \"level\": 10 },\r\n            { \"name\": \"wisdom\", \"level\": 10, },\r\n            { \"name\": \"charisma\", \"level\": 10 },\r\n        ],\r\n        \"stats\":[\r\n\t\t\t{\"name\": \"Acrobatics\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Dexterity\" },\r\n\t\t\t{\"name\": \"Animal Handling\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Wisdom\" },\r\n\t\t\t{\"name\": \"Arcana\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Intelligence\" },\r\n\t\t\t{\"name\": \"Athletics\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Strength\" },\r\n\t\t\t{\"name\": \"Deception\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Charisma\" },\r\n\t\t\t{\"name\": \"History\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Intelligence\" },\r\n\t\t\t{\"name\": \"Insight\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Wisdom\" },\r\n\t\t\t{\"name\": \"Intimidation\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Charisma\" },\r\n\t\t\t{\"name\": \"Investigation\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Intelligence\" },\r\n\t\t\t{\"name\": \"Medicine\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Wisdom\" },\r\n\t\t\t{\"name\": \"Nature\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Intelligence\" },\r\n\t\t\t{\"name\": \"Perception\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Wisdom\" },\r\n\t\t\t{\"name\": \"Performance\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Charisma\" },\r\n\t\t\t{\"name\": \"Persuasion\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Charisma\" },\r\n\t\t\t{\"name\": \"Religion\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Intelligence\" },\r\n\t\t\t{\"name\": \"Sleight of Hand\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Dexterity\" },\r\n\t\t\t{\"name\": \"Stealth\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Dexterity\" },\r\n\t\t\t{\"name\": \"Survival\", \"level\": 0, \"type\": \"skill\", \"baseType\": \"Wisdom\" },\r\n\r\n\t\t\t{\"name\": \"Passive Wisdom (Perception)\" , \"level\": 0 ,\"type\": \"skills\", \"baseType\": \"None\" },\r\n\t\t\t{\"name\": \"English\" , \"level\": 0 ,\"type\": \"language\", \"baseType\": \"None \"},\r\n        ],\r\n        \"inventory\":[\r\n\t\t\t{\"name\": \"Equipment template\", \"cost\": \"cost in whatever\" , \"amount\": 0, \"desc\": \"some text\", \"type\": \"equipment\"},\r\n\t\t],\r\n\t\t\"combats\":[ \r\n\t\t\t{\"name\": \"Strength\", \"value\": 0, \"type\": \"savingThrows\" },\r\n\t\t\t{\"name\": \"Dexterity\", \"value\": 0, \"type\": \"savingThrows\" },\r\n\t\t\t{\"name\": \"Constitution\", \"value\": 0, \"type\": \"savingThrows\" },\r\n\t\t\t{\"name\": \"Intelligence\", \"value\": 0, \"type\": \"savingThrows\" },\r\n\t\t\t{\"name\": \"Wisdom\", \"value\": 0, \"type\": \"savingThrows\" },\r\n\t\t\t{\"name\": \"Charisma\", \"value\": 0, \"type\": \"savingThrows\" },\r\n\r\n\t\t\t{\"name\": \"Armour Class\", \"value\": 0 },\r\n\t\t\t{\"name\": \"Initiative\", \"value\": 0 },\r\n\t\t\t{\"name\": \"Speed\", \"value\": 0 },\r\n\t\t\t{\"name\": \"Hit Dice\", \"value\": 0 , \"total\": 0 },\r\n\t\t\t{\"name\": \"Death Saves\", \"successes\": 0, \"failures\": 0},\r\n\t\t],\r\n    };\r\n\r\n    return obj;\r\n}\r\n\r\nexport async function deleteAllCharacters(){\r\n\t//await fs.writeFile(\"characters.json\", [], 'utf8');\r\n\tawait fs.unlink(\"characters.json\");\r\n}\r\n\r\nexport function getCharactersFromJSON(callback, flagCallback) {\r\n    fs.exists(\"characters.json\", function(exists){\r\n        if(!exists){\r\n            //console.log(\"Create characters.json file!\");\r\n            fs.writeFile(\"characters.json\", [], 'utf8', err => {\r\n                if(err) throw err;\r\n            })\r\n        }else{\r\n            //console.log(\"characters.json already created, loading characters\");\r\n            fs.readFile(\"characters.json\", 'utf8', function(err, data){\r\n                if(err) throw err;\r\n                callback(JSON.parse(data));\r\n                flagCallback(true);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport async function writeCharactersToJSON(characters, flagCallback){\r\n    await fs.writeFile(\"characters.json\", JSON.stringify(characters), 'utf8', err => {\r\n        if(err) throw err;\r\n\r\n        flagCallback(true);\r\n    });\r\n}\r\n\r\nexport function findIndexWithAttribute(array, attr, value){\r\n    for(let i = 0; i < array.length; i++){\r\n        if(array[i][attr] === value){\r\n            return i;\r\n        }\r\n    }\r\n    return -1; // We failed\r\n}\r\n\r\nexport function createStatObject(name, level, type){\r\n\tlet newStatObject = {\r\n\t\tname: name,\r\n\t\tlevel: parseInt(level),\r\n\t\ttype: type,\r\n\t\tbaseType: \"none\"\r\n\t};\r\n\treturn newStatObject;\r\n}\r\n\r\nexport function createItemObject(name, cost, amount, desc, type){\r\n\tlet newItemObject = {\r\n\t\tname: name,\r\n\t\tcost: cost,\r\n\t\tamount: parseInt(amount),\r\n\t\tdesc: desc,\r\n\t\ttype: type\r\n\t};\r\n\treturn newItemObject;\r\n}\r\n\r\nexport function getSupportedClasses(){\r\n\treturn [\"Mage\", \"Elf\", \"Orc\", \"Rogue\", \"Knight\" ];\r\n}\r\n\r\n\r\nexport function getStatTypes(callback) {\r\n\tfs.exists(\"stat_types.json\", function(exists){\r\n\t\tif(!exists){\r\n\t\t\tfs.writeFile(\"stat_types.json\", JSON.stringify([\"Skill\", \"Language\", \"Trait\"]), 'utf8', err => {\r\n\t\t\t\tif(err) throw err;\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tfs.readFile(\"stat_types.json\", 'utf8', (err,data) => {\r\n\t\t\t\tif(err) throw err;\r\n\t\t\t\tcallback(JSON.parse(data));\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport async function writeStatTypesToJSON(statTypes){\r\n    await fs.writeFile(\"stat_types.json\", JSON.stringify(statTypes), 'utf8', err => {\r\n        if(err) throw err;\r\n    });\r\n}\r\n\r\n// Reducer to get image name from \r\nexport function getCharacterImage(className){\r\n\tswitch(className.toLowerCase()){\r\n\t\tcase 'mage':\r\n\t\t\treturn mageImg;\r\n\t\tcase 'elf':\r\n\t\t\treturn elfImg;\r\n\t\tcase 'orc':\r\n\t\t\treturn orcImg;\r\n\t\tcase 'rogue':\r\n\t\t\treturn rogueImg;\r\n\t\tcase 'knight':\r\n\t\t\treturn knightImg;\r\n\t\tdefault:\r\n\t\t\treturn mageImg;\r\n\t}\r\n}\r\nexport function getBaseStatImage(statName){\r\n\tswitch(statName.toLowerCase()){\r\n\t\tcase 'strength':\r\n\t\t\treturn strengthImg;\r\n\t\tcase 'intelligence':\r\n\t\t\treturn intelligenceImg;\r\n\t\tcase 'wisdom':\r\n\t\t\treturn wisdomImg;\r\n\t\tcase 'constitution':\r\n\t\t\treturn constitutionImg;\r\n\t\tcase 'dexterity':\r\n\t\t\treturn dexterityImg;\r\n\t\tcase 'charisma':\r\n\t\t\treturn charismaImg;\r\n\t\tdefault:\r\n\t\t\treturn mageImg;\r\n\t}\r\n}","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nimport \"../style/CharacterCreation.css\"\r\n\r\n// JSON and Character related functions\r\nimport {getBaseCharacter, writeCharactersToJSON, getSupportedClasses} from '../characters_utility'\r\n\r\nconst CHARACTER_NAME_ERROR_INDEX = 0;\r\nconst CAMPAIGN_NAME_ERROR_INDEX = 1;\r\nconst INIT_MAX_XP_ERROR_INDEX = 2;\r\nconst INIT_MAX_HP_ERROR_INDEX = 3;\r\n\r\nfunction CharacterCreation(props) {\r\n    \r\n    // States for the new characters data\r\n    const [characterName, setCharacterName] = React.useState(\"\");\r\n    const [initMapXP, setInitMaxXP] = React.useState(1);\r\n    const [initMaxHP, setInitMaxHP] = React.useState(1);\r\n    const [campaignName, setCampaignName] = React.useState(\"\");\r\n    const [characterClass, setCharacterClass] = React.useState(\"\");\r\n    const [modalOpen, setModalOpen] = React.useState(false);\r\n    const [errorMessages, setErrorMessages] = React.useState([]);\r\n\r\n    let openModal = () => { \r\n        setModalOpen(true); \r\n    }    \r\n    let closeModal = () => { \r\n        setErrorMessages([]);\r\n        setModalOpen(false); \r\n    }\r\n    \r\n    let handleSubmit = (e) => {\r\n        \r\n        let passedEvaluation = true; // Flag\r\n        setErrorMessages([]);\r\n        let _list = [];\r\n\r\n        // Evaluate errors, should we flag for input fail\r\n        if(characterName === \"\"){\r\n            passedEvaluation = false;\r\n            _list[CHARACTER_NAME_ERROR_INDEX] = true;\r\n        }\r\n        if(campaignName === \"\"){\r\n            passedEvaluation = false;\r\n            _list[CAMPAIGN_NAME_ERROR_INDEX] = true;\r\n        }\r\n        if(initMapXP <= 0){\r\n            passedEvaluation = false;\r\n            _list[INIT_MAX_XP_ERROR_INDEX] = true;\r\n        }\r\n        if(initMaxHP <= 0){\r\n            passedEvaluation = false;\r\n            _list[INIT_MAX_HP_ERROR_INDEX] = true;\r\n        }\r\n        setErrorMessages(_list);\r\n\r\n        if(passedEvaluation) {\r\n            // Create the character\r\n            let newCharacter = getBaseCharacter(characterName, initMaxHP, initMapXP, campaignName, characterClass);\r\n            // Make sure we're not creating a character that already has characterName!\r\n        \r\n            if(props.characters.length === 0) { //if it is the first character\r\n                newCharacter.ID = 1;\r\n            }\r\n            else{\r\n                newCharacter.ID = props.characters[props.characters.length-1].ID + 1; //makes sure that ID always is unique \r\n            }\r\n            props.characters.push(newCharacter); // Add to the actual array \r\n            writeCharactersToJSON(props.characters, props.setHasSaved); // Write to JSON\r\n            props.setCharacters(props.characters); // New character added!\r\n            closeModal(); // Close modal\r\n            \r\n            // Reset created character info\r\n            setCharacterName(\"\");\r\n            setInitMaxXP(0);\r\n            setInitMaxHP(0);\r\n            setCampaignName(\"\");\r\n            setCharacterClass(\"Mage\");\r\n        }\r\n    }\r\n    \r\n    return(\r\n        \r\n        <div className=\"CharacterCreation\">\r\n            <p onClick={() => openModal()}>Create a new character +</p>\r\n            <Modal\r\n                isOpen={modalOpen}    \r\n                onRequestClose={() => closeModal()}\r\n                shouldCloseOnOverlayClick={true}\r\n                className=\"Modal1\"\r\n            >\r\n                <div className=\"FormplusButton\">\r\n                    <form>\r\n                        <label>\r\n                            \r\n                            <p>Character Name{errorMessages[CHARACTER_NAME_ERROR_INDEX] === true && <span className=\"error-message\">Invalid Character Name!</span>}</p>\r\n                            <input type=\"text\" name=\"name\" value={characterName} placeholder=\"Name\" onChange={e => setCharacterName(e.target.value)} />\r\n                        </label>\r\n                        <br></br>\r\n                        <label>\r\n                            <p>Initial Max HP{errorMessages[INIT_MAX_HP_ERROR_INDEX] === true && <span className=\"error-message\">Initial Max HP Invalid!</span>}</p>\r\n                            <input type=\"number\" name=\"hp\" value={initMaxHP} onChange={e => setInitMaxHP(e.target.value)} />\r\n                        </label>\r\n                        <label>\r\n                            <p>Initial Max XP{errorMessages[INIT_MAX_XP_ERROR_INDEX] === true && <span className=\"error-message\">Initial Max XP Invalid!</span>}</p>\r\n                            <input type=\"number\" name=\"init_max_xp\" value={initMapXP} onChange={ e => setInitMaxXP(e.target.value)} />\r\n                        </label>\r\n                        \r\n                        <label>\r\n                            <p>Campaign Name{errorMessages[CAMPAIGN_NAME_ERROR_INDEX] === true && <span className=\"error-message\">Invalid Campaign Name!</span>}</p>\r\n                            <input type=\"text\" name=\"campaign_name\" value={campaignName} placeholder=\"Campaign Name\" onChange={e => setCampaignName(e.target.value)} />\r\n                        </label>\r\n                        <label>\r\n                            <p>Class</p>\r\n                            <select name=\"Class\" value={characterClass} onChange={e => {setCharacterClass(e.target.value)}}>\r\n                                {getSupportedClasses().map((element, i) => {\r\n                                    return <option key={i} value={element}>{element}</option>\r\n                                })}\r\n                            </select>\r\n                        </label>\r\n                        <br></br>\r\n                    </form>\r\n                    \r\n                    <button onClick={() => {\r\n                        handleSubmit();}}>Create</button>\r\n\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CharacterCreation;","import React from 'react';\r\n\r\nimport { BrowserRouter as Switch, Link } from \"react-router-dom\";\r\nimport { getCharacterImage, getCharactersFromJSON, writeCharactersToJSON } from \"../characters_utility\";\r\nimport \"../style/CharacterSelect.css\";\r\n\r\nimport CharacterCreation from './CharacterCreation';\r\n\r\nimport \"../style/HeaderStartPage.css\";\r\n//import HeaderStartPage from \"./HeaderStartPage.js\";\r\n\r\n/* Character Select Screen */\r\n\r\nfunction CharacterSelectOption(props){\r\n\r\n    // This is the individual character that pops up for the user to click on, used in CharacterSelect()\r\n    // Props up a Link tag that links to the character page with correct context\r\n    return(\r\n        <div className=\"characterOption\">\r\n\t\t\t<img src={getCharacterImage(props.character.class_name)} alt=\"placeholder\"/>\r\n\t\t\t<Link to={\"/character_page/\" + props.character.ID}>\r\n                <h3>{props.character.name}</h3>\r\n                <h5>Campaign: {props.character.campaign_name}</h5>\r\n            </Link>\r\n            <button onClick={ e => {props.removeCallback(props.character.ID)} }>Delete</button>        \r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CharacterSelect(){\r\n\r\n    // State hook for the characters\r\n    const [characters, setCharacters] = React.useState([]);\r\n    const [hasLoaded, setLoaded] = React.useState(false);\r\n    const [hasSaved, setHasSaved] = React.useState(false);\r\n\r\n    // Get the characters\r\n    if(!hasLoaded)\r\n        getCharactersFromJSON(setCharacters, setLoaded);\r\n    if(hasSaved)\r\n        setHasSaved(false);\r\n\r\n    // Remove callback\r\n    let removeCharacter = ID => {\r\n        // Takeout the desired character from the big character list!\r\n        characters.splice(characters.findIndex(c => c.ID === ID), 1);\r\n        // Write the new character list to the JSON file\r\n        writeCharactersToJSON(characters, setHasSaved);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <nav>\r\n            <p>...</p>\r\n            <img src=\"logo.png\"></img>\r\n            <p>...</p>\r\n        </nav>\r\n\r\n        <div className=\"wrapper\">\r\n            <div className=\"CharacterSelect\">\r\n                <h3>Select Character:</h3>\r\n                <div className=\"characterList\">\r\n                    \r\n                    {characters.length === 0 && <h2>You have no characters!</h2>}\r\n                    \r\n                    {characters.map((c,i) => {\r\n                        return( <CharacterSelectOption key={i} character={c} removeCallback = {removeCharacter} />);\r\n                    \r\n                    })}\r\n                </div>\r\n\r\n\t\t\t\t<div className=\"createNew\">\r\n                    <CharacterCreation characters={characters} setCharacters={setCharacters} setHasSaved={setHasSaved} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CharacterSelect;\r\n","import React from 'react';\r\n\r\nfunction ScrollToTop(){\r\n\r\n    let handleClick = () => {\r\n        window.scrollTo(0, 0); // Performs an instantenious scroll to the top left of the window\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"toTop\" onClick={() => {handleClick()} }>Go To Top</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScrollToTop;","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\n\r\nimport '../style/CharacterPage.css'\r\n\r\nimport {BrowserRouter as Switch, Link} from \"react-router-dom\";\r\n\r\nimport { getStatTypes, writeStatTypesToJSON, getBaseStatImage, getCharacterImage, getCharactersFromJSON, writeCharactersToJSON, findIndexWithAttribute, createItemObject, createStatObject } from \"../characters_utility\";\r\nimport ScrollToTop from './ScrollToTop.js'\r\n\r\nModal.setAppElement('#root'); // Modal needs to know this for some complicated reason\r\n\r\nlet itemTypes = [\"Weapon\", \"Potion\", \"Misc\"];\r\n\r\nfunction CharacterHeader(props){\r\n\r\n    let character = props.character;\r\n\r\n    let updateHP = (dir) => {\r\n        character.hp += parseInt(dir);\r\n        props.updatedCharacter(character);\r\n    }\r\n\r\n    let updateMaxHP = (dir) => {\r\n        character.max_hp += parseInt(dir);\r\n        props.updatedCharacter(character);\r\n    } \r\n\r\n    let updateTemporaryHP = (dir) => {\r\n        character.temporary_hp += parseInt(dir);\r\n        props.updatedCharacter(character);\r\n    }\r\n\r\n    let updateXP = (dir) => {\r\n        character.xp += dir;\r\n        props.updatedCharacter(character);\r\n    }\r\n\r\n    let updateMaxXP = dir => {\r\n        character.max_xp += (dir);\r\n        props.updatedCharacter(character);\r\n    }\r\n\r\n    // Controls for the modal\r\n    const [modalOpen, setModalOpen] = React.useState(false); \r\n    let openModal = () => { \r\n        setModalOpen(true);\r\n    }    \r\n    let closeModal = () => { setModalOpen(false); }\r\n\r\n    const [levelUpModalOpen, setLevelUpModalOpen] = React.useState(false);\r\n    let openLevelUpModal = () => { setLevelUpModalOpen(true); }\r\n    let closeLevelUpModal = () => { setLevelUpModalOpen(false); }\r\n    let handleStateClick = e => {\r\n        props.setCurrentPage(e);\r\n    }\r\n\r\n    //Krav för temporaryHP ska visas\r\n    const [showTemp, setShowTemp] = React.useState(false);\r\n    \r\n    let showTemporary = (overflow, temp) => {\r\n        if(overflow > 0 && overflow <= temp) {\r\n            setShowTemp(true);\r\n        }\r\n        else{\r\n            setShowTemp(false);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"CharacterHeader\">\r\n            <nav>\r\n            <Link to={\"/\"}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path opacity=\".87\" fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16.62 2.99c-.49-.49-1.28-.49-1.77 0L6.54 11.3c-.39.39-.39 1.02 0 1.41l8.31 8.31c.49.49 1.28.49 1.77 0s.49-1.28 0-1.77L9.38 12l7.25-7.25c.48-.48.48-1.28-.01-1.76z\"/></svg> </Link>\r\n            <img src=\"../../logo.png\"></img>\r\n                <a className=\"invisible\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path opacity=\".87\" fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16.62 2.99c-.49-.49-1.28-.49-1.77 0L6.54 11.3c-.39.39-.39 1.02 0 1.41l8.31 8.31c.49.49 1.28.49 1.77 0s.49-1.28 0-1.77L9.38 12l7.25-7.25c.48-.48.48-1.28-.01-1.76z\"/></svg></a>\r\n            </nav>\r\n            <div className=\"section-1\">\r\n                <img alt={\"Character Error\"} src={getCharacterImage(character.class_name)}></img>\r\n                <div className=\"text\">\r\n                    <div>\r\n                        <h2> {character.name} </h2>\r\n                        <h3>Lv.{character.level}</h3>\r\n                    </div>\r\n                    <p>{character.campaign_name}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"HP\" onClick={e => {openModal()}}>\r\n            <p> HP: {character.hp}/{character.max_hp + character.temporary_hp} { character.temporary_hp > 0 && <span>({character.temporary_hp})</span> } </p> \r\n            <div className=\"innerHP\" style={ showTemp ? {width:(1 - ((character.hp - character.max_hp)/(character.max_hp + character.temporary_hp))) * 100 + \"%\"} : {width: (character.hp/character.max_hp) * 100 + \"%\"}}> </div> \r\n            <div className=\"temporaryHP\" style={ showTemp ? {width: ((character.hp - character.max_hp)/(character.max_hp + character.temporary_hp)) * 100 + \"%\"} : {}}></div>\r\n            \r\n            </div>\r\n            \r\n            {character.xp >= character.max_xp && <button className=\"lvlUp\" onClick={e => {openLevelUpModal()} }>Level Up!</button>}\r\n            <div className=\"XP\" onClick={e => {openModal()}}>\r\n            <div className=\"innerXP\" style={{width: (character.xp/character.max_xp) * 100 + \"%\"}}>\r\n            <p> XP: {character.xp}/{character.max_xp}</p></div>\r\n            </div>\r\n            \r\n                { props.currentPage === \"stats\" &&\r\n                    <div className=\"menu\">\r\n                        <button className=\"active\" onClick={() => handleStateClick(\"stats\")} >Stats</button>\r\n                        <button onClick={() => handleStateClick(\"inventory\")}>Inventory</button>\r\n                        <button onClick={() => handleStateClick(\"combat\")}>Combat</button>\r\n                    </div>\r\n                }\r\n                { props.currentPage === \"inventory\" &&\r\n                    <div className=\"menu\">\r\n                        <button onClick={() => handleStateClick(\"stats\")} >Stats</button>\r\n                        <button className=\"active\" onClick={() => handleStateClick(\"inventory\")}>Inventory</button>\r\n                        <button onClick={() => handleStateClick(\"combat\")}>Combat</button>\r\n                    </div>\r\n                }\r\n                { props.currentPage === \"combat\" &&\r\n                    <div className=\"menu\">\r\n                        <button onClick={() => handleStateClick(\"stats\")}>Stats</button>\r\n                        <button onClick={() => handleStateClick(\"inventory\")}>Inventory</button>\r\n                        <button className=\"active\" onClick={() => handleStateClick(\"combat\")}>Combat</button>\r\n                    </div>\r\n                }\r\n\r\n            <Modal\r\n                isOpen={modalOpen}    \r\n                onRequestClose={() => closeModal()}\r\n                shouldCloseOnOverlayClick={true}\r\n                className=\"Modal HPandXPModal\">\r\n\r\n                    <button className=\"closeModal\" onClick={()=>closeModal()}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z\"/></svg></button>\r\n                    <h2>HP and XP</h2>\r\n                    <div className=\"modalBar\">\r\n                    {character.hp < character.max_hp + character.temporary_hp && <button className=\"healFull\" onClick={() =>updateHP((character.max_hp + character.temporary_hp) - character.hp)}>Heal To Full Health!</button>}\r\n                        <div className=\"HP\">\r\n                            <p> HP: {character.hp}/{character.max_hp + character.temporary_hp} { character.temporary_hp > 0 && <span>({character.temporary_hp})</span> } </p> \r\n                            <div className=\"innerHP\" style={ showTemp ? {width:(1 - ((character.hp - character.max_hp)/(character.max_hp + character.temporary_hp))) * 100 + \"%\"} : {width: (character.hp/character.max_hp) * 100 + \"%\"}}></div> \r\n                            <div className=\"temporaryHP\" style={ showTemp ? {width: ((character.hp - character.max_hp)/(character.max_hp + character.temporary_hp)) * 100 + \"%\"} : {}}></div>\r\n                        </div>\r\n                        {character.xp >= character.max_xp && <button className=\"lvlUp lvlUp-inModal\" onClick={e => {openLevelUpModal()} }>Level Up!</button>}\r\n                        <div className=\"XP\">\r\n                            <div className=\"innerXP\" style={{width: (character.xp/character.max_xp) * 100 + \"%\"}}>\r\n                            <p> XP: {character.xp}/{character.max_xp}</p></div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    \r\n                    <HPAndXPModal updateMaxXP={updateMaxXP} updateXP={updateXP} updateMaxHP={updateMaxHP} updateHP={updateHP} updateTemporaryHP={updateTemporaryHP} showTemporary={showTemporary} character={props.character}/> \r\n            \r\n            </Modal>\r\n\r\n            <Modal\r\n                isOpen={levelUpModalOpen}\r\n                onRequestClose={() => closeLevelUpModal()}\r\n                className=\"Modal lvlUpModal\"\r\n            >\r\n                \r\n                <LevelUpModal character={character} updatedCharacter={props.updatedCharacter} closeModal={closeLevelUpModal} />\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction LevelUpModal(props){\r\n\r\n    const [increaseMaxXP, setIncreaseMaxXP] = React.useState(0);\r\n    const [increaseMaxHP, setIncreaseMaxHP] = React.useState(0);\r\n\r\n    let levelUp = () => {\r\n        // Level up and remove XP\r\n        props.character.level++;\r\n        props.character.xp -= props.character.max_xp;\r\n\r\n        // Set new XP\r\n        props.character.max_xp += parseInt(increaseMaxXP);\r\n        props.character.max_hp += parseInt(increaseMaxHP);\r\n        props.character.hp += parseInt(increaseMaxHP);\r\n        \r\n        props.updatedCharacter(props.character);\r\n            \r\n        // Close modal?\r\n        if(props.character.xp < props.character.max_xp)\r\n            props.closeModal();\r\n    }\r\n\r\n    return(\r\n        <div className=\"levelUpModal\">\r\n            <button className=\"closeModal\" onClick={()=>props.closeModal()}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z\"/></svg></button>\r\n            <h2>You Leveled Up!</h2>\r\n\r\n            {increaseMaxHP != \"\" && <h4>New HP Cap: {props.character.max_hp} + {increaseMaxHP} = {parseInt(props.character.max_hp)+parseInt(increaseMaxHP)} </h4>}\r\n            {increaseMaxHP == \"\" && <h4>New HP Cap: {props.character.max_hp} + 0 = {props.character.max_hp}</h4>}\r\n            <input className=\"green-border\" type=\"number\" placeholder={\"Increase HP By\"} value={increaseMaxHP} onChange={e => {setIncreaseMaxHP(e.target.value)}}></input>\r\n            \r\n\r\n            {increaseMaxXP != \"\" && <h4>New XP Cap: {props.character.max_xp} + {increaseMaxHP} = {parseInt(props.character.max_xp)+parseInt(increaseMaxXP)} </h4>}\r\n            {increaseMaxXP == \"\" && <h4>New XP Cap: {props.character.max_xp} + 0 = {props.character.max_xp}</h4>}\r\n            <input className=\"blue-border\" type=\"number\" placeholder={\"Increase XP By\"} value={increaseMaxXP} onChange={e => {setIncreaseMaxXP(e.target.value)}}></input>\r\n            <p>Overflowed XP will be carried over to your next level.</p>\r\n            <button onClick={e => {levelUp()}}>Do It!</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction HPAndXPModal(props) {\r\n    const [incrementerHP, setIncrementerHP] = React.useState(1); \r\n    const [incrementerMaxHP, setIncrementerMaxHP] = React.useState(1);\r\n    const [incrementerTemporaryHP, setIncrementerTemporaryHP] = React.useState(1);\r\n    const [incrementerXP, setIncrementerXP] = React.useState(1);\r\n    const [incrementerMaxXP, setIncrementerMaxXP] = React.useState(1);\r\n\r\n    let updateHP = dir => {\r\n        if(incrementerHP !== 0){\r\n            if(props.character.hp + incrementerHP*dir <= 0){\r\n                props.updateHP(props.character.hp *dir);\r\n            }\r\n            else{\r\n                props.updateHP(incrementerHP*dir);\r\n            }    \r\n            props.showTemporary((props.character.hp - props.character.max_hp), props.character.temporary_hp);\r\n        }\r\n    }\r\n\r\n    let updateMaxHP = dir => {\r\n        if(incrementerMaxHP !== 0){\r\n            if(props.character.max_hp + incrementerMaxHP*dir <= 1){\r\n                props.updateHP((props.character.max_hp -1) *dir);\r\n            }\r\n            else{\r\n            props.updateMaxHP(incrementerMaxHP*dir);\r\n            }\r\n            props.showTemporary((props.character.hp - props.character.max_hp), props.character.temporary_hp);\r\n        }\r\n    }\r\n\r\n    let updateTemporaryHP = dir => {\r\n        if(dir === -2){\r\n            props.updateTemporaryHP(- props.character.temporary_hp);\r\n            props.showTemporary((props.character.hp - props.character.max_hp), props.character.temporary_hp);\r\n            if(props.character.hp > props.character.max_hp){\r\n                props.updateHP((props.character.hp - props.character.max_hp) * -1);\r\n            }\r\n        }\r\n\r\n        else if(incrementerTemporaryHP !== 0){ //funkar ej logiken är inte fungerande.\r\n            \r\n             if(props.character.temporary_hp + incrementerTemporaryHP*dir <= 0){\r\n                if(props.character.hp - props.character.max_hp === props.character.temporary_hp){\r\n                    props.updateHP(props.character.temporary_hp*dir);\r\n                }\r\n                props.updateTemporaryHP(props.character.temporary_hp*dir);\r\n            }\r\n            \r\n            else{\r\n                if(props.character.hp === props.character.max_hp + props.character.temporary_hp || dir > 0){\r\n                    props.updateHP(incrementerTemporaryHP*dir);\r\n                }\r\n\r\n            \r\n                props.updateTemporaryHP(incrementerTemporaryHP*dir);\r\n            }\r\n            props.showTemporary((props.character.hp - props.character.max_hp), props.character.temporary_hp);       \r\n        }\r\n    }\r\n    let updateXP = dir => {\r\n        if(incrementerXP !== 0){\r\n            props.updateXP(incrementerXP*dir);\r\n        }\r\n    }\r\n\r\n    let updateMaxXP = dir => {\r\n        if(incrementerMaxXP !== 0){\r\n            props.updateMaxXP(incrementerMaxXP*dir)\r\n        }\r\n    }\r\n\r\n    return(\r\n        \r\n        <div className=\"infoHPXP\">\r\n            \r\n            {/* HP Related Things Import CLOSEMODAL BUTTON function! */}\r\n             {/*<h3>HP:</h3>*/}\r\n            <div className=\"HP-change info-change\">\r\n                <h4>Current HP: {props.character.hp} </h4>\r\n                <div className=\"input-group\">\r\n                    <button onClick={e => { updateHP(-1) }}>-</button>\r\n                    <input className=\"green-border\" type=\"number\" value={incrementerHP} onChange={e => {\r\n                        let x = e.target.value;\r\n                        if(x >= 0)\r\n                            setIncrementerHP((x))}}>\r\n                    </input>\r\n                    <button onClick={e => { updateHP(1) }}>+</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"HP-change info-change\">\r\n                <h4>Max HP: {props.character.max_hp} </h4> \r\n                <div className=\"input-group\">\r\n                    <button onClick={e => { updateMaxHP(-1) }}>-</button>\r\n                    <input className=\"green-border\" type=\"number\" value={incrementerMaxHP} onChange={e => {\r\n                        let x = e.target.value;\r\n                        if(x >= 0)\r\n                            setIncrementerMaxHP(x)}}>\r\n                    </input>\r\n                    <button onClick={e => { updateMaxHP(1) }}>+</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"HP-change info-change\">\r\n                    <h4>Temporary hp HP: {props.character.temporary_hp} {props.character.temporary_hp > 0 && <button className=\"remove-temp\"onClick={e => { updateTemporaryHP(-2)}}>Remove</button>}</h4> \r\n                <div className=\"input-group\">\r\n                    <button onClick={e => { updateTemporaryHP(-1) }}>-</button>\r\n                    <input className=\"yellow-border\" type=\"number\" value={incrementerTemporaryHP} onChange={e => {\r\n                        let x = e.target.value;\r\n                        if(x >= 0)\r\n                            setIncrementerTemporaryHP(x)}}>    \r\n                    </input>\r\n                    <button onClick={e => { updateTemporaryHP(1) }}>+</button>\r\n                </div>\r\n                \r\n                \r\n                {/*<button onClick={e => { updateTemporaryHP(-2)}}>Remove Temporary HP</button>*/}\r\n            </div>\r\n\r\n            {/* XP Related Things */}\r\n            {/*<h3>XP:</h3>*/}\r\n            <div className=\"XP-change info-change\">\r\n                <h4>Current XP: {props.character.xp}</h4>\r\n                <div className=\"input-group\">    \r\n                    <button onClick={e => { updateXP(-1) }}>-</button>\r\n                    <input className=\"blue-border\" type=\"number\" value={incrementerXP} onChange={e => {\r\n                        let x = e.target.value;\r\n                        if(x >= 0)\r\n                            setIncrementerXP(e.target.value)}}>\r\n                    </input>\r\n                    <button onClick={e => { updateXP(1) }}>+</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"XP-change info-change\">\r\n                <h4>Max XP: {props.character.max_xp}</h4>\r\n                <div className=\"input-group\">\r\n                    <button onClick={e => { updateMaxXP(-1) }}>-</button>   \r\n                    <input className=\"blue-border\" type=\"number\" placeholder=\"Incrementation\" value={incrementerMaxXP} onChange={e => {\r\n                        let x = e.target.value;\r\n                        if(x >= 0)\r\n                            setIncrementerMaxXP(e.target.value)}}>\r\n                    </input>\r\n                    <button onClick={e => { updateMaxXP(1) }}>+</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction BaseStatCard(props){\r\n\r\n    const [modalOpen, setModalOpen] = React.useState(false); // Flag to know if we want to manipulate the stat?\r\n\r\n    let openModal = () => {\r\n        setModalOpen(true);\r\n    }    \r\n\r\n    let closeModal = () => {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    let changeStatLevel = dir => {\r\n        props.character.base_stats.find(s => s.name === props.base_stat.name).level += dir;\r\n        props.updatedCharacter(props.character);\r\n    }\r\n\r\n    // Calculate the modifier\r\n    let modifier = Math.floor((props.base_stat.level-10) / 2);\r\n\r\n    return(\r\n        <div className=\"BaseStatCard\">\r\n            <Modal\r\n                isOpen={modalOpen}    \r\n                onRequestClose={() => closeModal()}\r\n                shouldCloseOnOverlayClick={true}\r\n                className=\"Modal BaseStatModal\"\r\n            >\r\n                <button className=\"closeModal\" onClick={() => closeModal()}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z\"/></svg></button>\r\n                <h2>{props.base_stat.name}</h2>\r\n                {modifier >= 0 && <h5>Modifier: +{modifier}</h5> }     \r\n                {modifier < 0 &&  <h5>Modifier: {modifier}</h5>}\r\n            <div>\r\n                <button onClick={() => changeStatLevel(-1)}>-1</button>\r\n                 <p>{props.base_stat.level}</p>    \r\n                \r\n                <button onClick={() => changeStatLevel(1)}>+1</button>                \r\n            </div>\r\n            </Modal>\r\n            <div className=\"baseStat\" onClick={() => openModal()}>\r\n                <img className=\"baseStatImage\" src={getBaseStatImage(props.base_stat.name)}></img>\r\n                {modifier >= 0 && <div><p>{props.base_stat.level}</p> <p>+{modifier}</p></div>}     \r\n                {modifier < 0 &&  <div><p>{props.base_stat.level}</p> <p>{modifier}</p></div>}\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nfunction StatCard(props){\r\n\r\n    const [modalOpen, setModalOpen] = React.useState(false); // Flag to know if we want to manipulate the stat?\r\n\r\n    let openModal = () => {\r\n        setModalOpen(true);\r\n    }    \r\n\r\n    let closeModal = () => {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    let changeStatLevel = dir => {\r\n        // Manipulate the stat and call the callback for updating the character!\r\n        props.character.stats.find(s => s.name === props.stat.name).level += dir;\r\n        props.updatedCharacter(props.character);\r\n    }\r\n\r\n    let removeStat = () => {\r\n        props.character.stats.splice(props.character.stats.findIndex(s => s.name === props.stat.name), 1);\r\n        props.updatedCharacter(props.character);\r\n        closeModal();\r\n    }\r\n    \r\n    return (\r\n        <div className=\"StatCard Card\">\r\n            <div onClick={() => openModal()}>\r\n            <p>{props.stat.name} </p><p onClick={() => openModal()}> Lv: {props.stat.level}</p>\r\n            </div>\r\n            <Modal\r\n                isOpen={modalOpen}    \r\n                onRequestClose={() => closeModal()}\r\n                shouldCloseOnOverlayClick={true}\r\n                className=\"Modal modalStatCard\"\r\n                 >   \r\n                \r\n                <button className=\"closeModal\" onClick={() => closeModal()}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z\"/></svg></button>\r\n            \r\n                <h2>{props.stat.name}</h2>\r\n    <h5>{props.stat.type}</h5>\r\n                <div className=\"statDisplay\">\r\n                    <button onClick={() => changeStatLevel(-1)}>-1</button>\r\n                    <p>{props.stat.level}</p>\r\n                    <button onClick={() => changeStatLevel(1)}>+1</button>\r\n                </div>\r\n                <button className=\"remove-btn\" onClick={() => removeStat()}>Remove Stat</button>\r\n                \r\n            </Modal>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Stats(props){\r\n\r\n    // States used for adding a new stat\r\n    const [newStatName, setNewStatName] = React.useState(\"\");\r\n    const [newStatType, setNewStatType] = React.useState(\"Other\");\r\n    const [newStatLevel, setNewStatLevel] = React.useState(0);\r\n    const [modalOpen, setModalOpen] = React.useState(false); // Modal used for adding new stat!\r\n    const [errorMessages, setErrorMessages] = React.useState([]);\r\n\r\n    const [statTypes, setStatTypes] = React.useState([]);\r\n    const [wantsCustomType, setWantsCustomType] = React.useState(false); // Custom type\r\n\r\n    // Get custom types\r\n    if(statTypes.length === 0)\r\n        getStatTypes(setStatTypes);\r\n\r\n    // Operating the modal\r\n    let openModal = () => { setModalOpen(true); }\r\n    let closeModal = () => {\r\n        setErrorMessages([]); // Reset error messages\r\n        setModalOpen(false); \r\n    }\r\n\r\n    /* FILTER STATS */\r\n    const [searchString, setSearchString] = React.useState(\"\");\r\n    let filteredStats = props.character.stats;\r\n    if(searchString !== \"\"){\r\n\r\n        let keys = ['name', 'type'];\r\n\r\n        filteredStats = filteredStats.filter(entry => {\r\n            let returnValue = false;\r\n            keys.forEach(key => {\r\n                if(entry[key].toLowerCase().indexOf(searchString.toLocaleLowerCase()) !== -1){\r\n                    returnValue = true;\r\n                }\r\n            });\r\n            return returnValue;\r\n        });\r\n    }\r\n\r\n    /* Sort the stats alphabetically */\r\n    filteredStats.sort((statA, statB) => {\r\n        if(statA.name > statB.name)\r\n            return 1;\r\n        else if(statB.name > statA.name){\r\n            return -1;\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    // This gets called from a button within the add new stat modal!\r\n    let addNewStat = () => {\r\n\r\n        // Validation check\r\n        setErrorMessages([]); // Reset error messages\r\n        // Go through and check for invalid stuff\r\n        let wasEvaluated = true;\r\n        let _errors = [];\r\n        if(newStatName === \"\"){\r\n            wasEvaluated = false;\r\n            _errors.push(\"Invalid Stat Name\");\r\n        }\r\n        if(newStatType === \"\"){\r\n            wasEvaluated = false;\r\n            _errors.push(\"Invalid Stat Type\");\r\n        }\r\n        if(newStatLevel < 0){\r\n            wasEvaluated = false;\r\n            _errors.push(\"Invalid Stat Level\");\r\n        }\r\n        setErrorMessages(_errors); // Set the actual state\r\n\r\n        if(wasEvaluated){\r\n            // Create the object using function from character_utility.js\r\n            let newStatObject = createStatObject(newStatName, newStatLevel, newStatType);\r\n            // Push and update the character with the new stat\r\n            props.character.stats.push(newStatObject);\r\n            props.updatedCharacter(props.character);\r\n\r\n            // Reset\r\n            setNewStatName(\"\");\r\n            setNewStatType(\"Skill\");\r\n            setNewStatLevel(0);\r\n            setWantsCustomType(false);\r\n            \r\n            // Make sure we write the new stat type to the file if we did a custom one\r\n            if(wantsCustomType){\r\n                if(statTypes.indexOf(newStatType) === -1){\r\n                    let temp = statTypes;\r\n                    temp.push(newStatType);\r\n                    setStatTypes(temp);\r\n                    writeStatTypesToJSON(statTypes);\r\n                }\r\n            }\r\n\r\n            // Close the add new stat modal!\r\n            closeModal();\r\n        }\r\n    }\r\n\r\n    let changeStatType = v => {\r\n        if(v === \"add_new\"){\r\n            setWantsCustomType(true);\r\n            setNewStatType(\"Other\");\r\n        }else{\r\n            setNewStatType(v);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Stats page\">\r\n            <div className = \"baseStats\">\r\n            {/* DISPLAY BASE STATS */}\r\n            {props.character.base_stats.map((base_stat, j) =>{\r\n                return < BaseStatCard key={j} base_stat={base_stat} character={props.character} updatedCharacter={props.updatedCharacter} />\r\n            })}\r\n            </div>\r\n            <button className=\"addStatBtn\" onClick={() => openModal()}>+</button>\r\n\r\n            {/* SEARCH AND DISPLAY STATS */}\r\n            <svg className=\"search-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M15.5 14h-.79l-.28-.27c1.2-1.4 1.82-3.31 1.48-5.34-.47-2.78-2.79-5-5.59-5.34-4.23-.52-7.79 3.04-7.27 7.27.34 2.8 2.56 5.12 5.34 5.59 2.03.34 3.94-.28 5.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/></svg>\r\n            <input className=\"searchbar\" type=\"text\" placeholder={\"Search Name or Type of Stat\"} onChange={e => {setSearchString(e.target.value)}}></input>\r\n            {filteredStats.map((stat, i) => {\r\n                return < StatCard key={i} stat={stat} character={props.character} updatedCharacter={props.updatedCharacter} />\r\n            })}\r\n\r\n            {/*scrolls to the top of the page*/}\r\n            <ScrollToTop/>\r\n\r\n            {/* MODAL FOR ADDING A NEW STAT */}\r\n            <Modal\r\n                isOpen = {modalOpen}\r\n                onRequestClose = {() => closeModal()}\r\n                shouldCloseOnOverlayClick={true}\r\n                className=\"Modal addStatModal\"\r\n            ><button className=\"closeModal\" onClick={()=>closeModal()}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z\"/></svg></button>\r\n                <h2>Add a New Stat!</h2>\r\n                <form>\r\n                    <p>Stat Name</p>\r\n                    <input type=\"text\" placeholder=\"Stat Name\" onChange={e => {setNewStatName(e.target.value)}}></input>\r\n                    <p>Type</p>\r\n                    {/* Conditional rendering to check if we want custom type or not, change input fields depending on that */}\r\n                    {!wantsCustomType && \r\n                            \r\n                            <select name=\"Type\" onChange={e => {changeStatType(e.target.value)}} >\r\n                                {statTypes.map((st, i) => {\r\n                                    return <option key={i} value={st}>{st}</option>\r\n                                })}\r\n                                <option value=\"add_new\">Add New Type</option>\r\n                            </select>\r\n                    }\r\n                    {wantsCustomType && \r\n                       \r\n                            <input type=\"text\" placeholder=\"Custom Type\" onChange={e => {setNewStatType(e.target.value)}}></input>\r\n                        \r\n                    }\r\n                    <p>Stat level</p>\r\n                    <input type=\"number\" placeholder=\"Stat Level\" onChange={e => {setNewStatLevel(e.target.value)}}></input>                    \r\n                </form>\r\n                <button onClick = {() => addNewStat()}>Add Stat!</button>\r\n                {errorMessages.map((msg, i) => {\r\n                    return <p key={i}>- {msg} -</p>\r\n                })}\r\n\r\n            </Modal>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ItemCard(props){\r\n\r\n    const [modalOpen, setModalOpen] = React.useState(false); // Flag to know if we want to manipulate the stat?\r\n\r\n    const [name, setName] = React.useState(props.item.name);\r\n    const [cost, setCost] = React.useState(props.item.cost);\r\n    const [amount, setAmount] = React.useState(props.item.amount);\r\n    const [desc, setDesc] = React.useState(props.item.desc);\r\n    const [type, setType] = React.useState(props.item.type);\r\n\r\n    const [errorMessages, setErrorMessages] = React.useState([]);\r\n\r\n    // Modal handling stuff\r\n    let openModal = () => { setModalOpen(true); }    \r\n    let closeModal = () => { \r\n\r\n        // Validation check\r\n        setErrorMessages([]); // Reset error messages\r\n        // Go through and check for invalid stuff\r\n        let wasEvaluated = true;\r\n        let _errors = [];\r\n        if(name === \"\"){\r\n            wasEvaluated = false;\r\n            _errors.push(\"Invalid Item Name\");\r\n        }\r\n        if(cost === \"\"){\r\n            wasEvaluated = false;\r\n            _errors.push(\"Invalid Item Cost\");\r\n        }\r\n        if(amount <= 0){\r\n            wasEvaluated = false;\r\n            _errors.push(\"Invalid Item Amount\")\r\n        }\r\n        setErrorMessages(_errors); // Set the actual state\r\n\r\n        if(wasEvaluated){\r\n            // Update the item\r\n            let index = findIndexWithAttribute(props.character.inventory, 'name', props.item.name);\r\n            // Update each property with the new item values\r\n            props.character.inventory[index].name = name;\r\n            props.character.inventory[index].cost = cost;\r\n            props.character.inventory[index].amount = amount;\r\n            props.character.inventory[index].desc = desc;\r\n            props.character.inventory[index].type = type;\r\n            // Callback for the file writing \r\n            props.updatedCharacter(props.character);\r\n            // Close the modal now\r\n            setModalOpen(false); \r\n        }\r\n    } \r\n\r\n    let removeItem = () => {\r\n        props.character.inventory.splice(props.character.inventory.findIndex(s => s.name === props.item.name), 1);\r\n        props.updatedCharacter(props.character);\r\n        setModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"ItemCard Card\">                       \r\n            <p onClick={() => openModal()} >Name: {props.item.name} </p>\r\n            <Modal\r\n                isOpen={modalOpen}    \r\n                onRequestClose={() => closeModal()}\r\n                shouldCloseOnOverlayClick={true}\r\n                className=\"Modal\"\r\n            >             \r\n                <input type=\"text\" placeholder={\"name\"} value={name} onChange={e => {setName(e.target.value)}}></input> <br></br>\r\n                <input type=\"text\" placeholder={\"cost\"} value={cost} onChange={e => {setCost(e.target.value)}}></input> <br></br>\r\n                <input type=\"number\" placeholder={\"amount\"} value={amount} onChange={e => {setAmount(e.target.value)}}></input> <br></br>\r\n                <input type=\"text\" placeholder={\"description\"} value={desc} onChange={e => {setDesc(e.target.value)}}></input> <br></br>\r\n                <select name=\"Type\" value={type} onChange={e => {setType(e.target.value)}} >\r\n                    {itemTypes.map((type, i) => {\r\n                        return <option key={i} value={type}>{type}</option>\r\n                    })}\r\n                </select><br></br>\r\n\r\n                <button onClick = {removeItem}>Remove</button>\r\n\r\n                <button onClick={() => closeModal()}>Save</button>\r\n\r\n                {errorMessages.map((msg, i) => {\r\n                    return <p key={i}>- {msg} -</p>\r\n                })}\r\n\r\n            </Modal>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Inventory(props){\r\n\r\n    const [newItemName, setNewItemName] = React.useState(\"\");\r\n    const [newItemDesc, setNewItemDesc] = React.useState(\"\");\r\n    const [newItemType, setNewItemType] = React.useState(\"Weapon\");\r\n    const [newItemAmount, setNewItemAmount] = React.useState(0);\r\n    const [newItemCost, setNewItemCost] = React.useState(\"\");\r\n\r\n    const [modalOpen, setModalOpen] = React.useState(false); // Modal used for adding new stat!\r\n    const [errorMessages, setErrorMessages] = React.useState([]);\r\n\r\n    // Operating the modal\r\n    let openModal = () => { setModalOpen(true); }\r\n    let closeModal = () => {\r\n        setErrorMessages([]);\r\n        setModalOpen(false); \r\n    }\r\n\r\n    // This gets called from a button within the add new item modal!\r\n    let addNewItem = () => {\r\n\r\n        // Validation check\r\n        setErrorMessages([]); // Reset error messages\r\n        // Go through and check for invalid stuff\r\n        let wasEvaluated = true;\r\n        let _errors = [];\r\n        if(newItemName === \"\"){\r\n            wasEvaluated = false;\r\n            _errors.push(\"Invalid Item Name\");\r\n        }\r\n        if(newItemCost === \"\"){\r\n            wasEvaluated = false;\r\n            _errors.push(\"Invalid Item Cost\");\r\n        }\r\n        if(newItemAmount <= 0){\r\n            wasEvaluated = false;\r\n            _errors.push(\"Invalid Item Amount\")\r\n        }\r\n        setErrorMessages(_errors); // Set the actual state\r\n\r\n        if(wasEvaluated){\r\n            // CharacterUtillity function\r\n            let newItemObject = createItemObject(newItemName, newItemCost, newItemAmount, newItemDesc, newItemType);\r\n            // Push and update the character with the new item\r\n            props.character.inventory.push(newItemObject);\r\n            props.updatedCharacter(props.character);\r\n\r\n            // Reset input \r\n            setNewItemName(\"\");\r\n            setNewItemDesc(\"\");\r\n            setNewItemCost(\"\");\r\n            setNewItemType(\"Weapon\");\r\n            setNewItemAmount(0);\r\n\r\n            // Close the add new item modal\r\n            closeModal();\r\n        }\r\n    }\r\n\r\n    /* FILTER INVENTORY */\r\n    const [searchString, setSearchString] = React.useState(\"\");\r\n    let filteredInventory = props.character.inventory;\r\n    if(searchString !== \"\"){\r\n        let keys = ['name', 'type', 'desc', 'cost'];\r\n        filteredInventory = filteredInventory.filter(entry => {\r\n            let returnValue = false;\r\n            keys.forEach(key => {\r\n                if(entry[key].toLowerCase().indexOf(searchString.toLocaleLowerCase()) !== -1){\r\n                    returnValue = true;\r\n                }\r\n            });\r\n            return returnValue;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"Inventory page\">\r\n        \r\n           <button onClick={openModal}>Add New Item</button>\r\n\r\n            {/* DISPLAY THE FILTERED INVENTORY USING ITEM CARD COMPONENT */}\r\n            <input className=\"searchbar\" type=\"text\" placeholder={\"inventory\"} onChange={e => {setSearchString(e.target.value)}}></input>\r\n            {filteredInventory.map((item, i) => {\r\n                return <ItemCard key={i} item={item} character={props.character} updatedCharacter={props.updatedCharacter} />\r\n            })}\r\n\r\n            {/*scrolls to the top of the page*/}\r\n            <ScrollToTop/>\r\n            \r\n            {/* MODAL FOR ADDING A NEW STAT */}\r\n            <Modal\r\n                isOpen = {modalOpen}\r\n                onRequestClose = {() => closeModal()}\r\n                shouldCloseOnOverlayClick={true}\r\n                className=\"Modal\"\r\n            >       \r\n                <form>\r\n                    <input type=\"text\" placeholder=\"Item Name\" onChange={e => {setNewItemName(e.target.value)}}></input>\r\n                    <input type=\"text\" placeholder=\"Description\" onChange={e => {setNewItemDesc(e.target.value)}}></input>\r\n                    <input type=\"number\" placeholder=\"Amount\" onChange={e => {setNewItemAmount(e.target.value)}}></input>                    \r\n                    <input type=\"cost\" placeholder=\"Cost\" onChange={e => {setNewItemCost(e.target.value)}}></input>\r\n                    <select name=\"Type\" value={newItemType} onChange={e => {setNewItemType(e.target.value)}} >\r\n                        {itemTypes.map((type, i) => {\r\n                            return <option key={i} value={type}>{type}</option>\r\n                        })}\r\n                    </select>\r\n                </form>\r\n                <button onClick = {() => addNewItem()}>Add</button>\r\n                <button onClick={() => closeModal()}>Close</button>\r\n\r\n                {errorMessages.map((msg, i) => {\r\n                    return <p key={i}>- {msg} -</p>\r\n                })}\r\n\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CombatCard(props) {\r\n    \r\n    const [modalOpen, setModalOpen] = React.useState(false);\r\n    let openModal = () => { setModalOpen(true); }    \r\n    let closeModal = () => { setModalOpen(false); }\r\n\r\n    let changeStatLevel = (dir, id) => {\r\n        props.character.combats.find(s => s.name === props.combat.name)[id] += dir;\r\n        props.updatedCharacter(props.character);\r\n    }\r\n   \r\n    return (\r\n        <div className=\"CombatCard Card\">\r\n            <div onClick={() => openModal()}> Name: {props.combat.name} :\r\n            {props.combat.value != null && props.combat.value}\r\n            {props.combat.type != null && <p>Saving throws</p>}\r\n            {props.combat.maximum != null && <p> Maximum: {props.combat.maximum}</p>}\r\n            {props.combat.total != null && <p> Total: {props.combat.total}</p>}\r\n            {props.combat.successes != null && <p> Successes: {props.combat.successes} Failiures: {props.combat.failures}</p>}\r\n            </div>\r\n            <Modal\r\n                isOpen = {modalOpen}\r\n                onRequestClose = {() => closeModal()}\r\n                shouldCloseOnOverlayClick={true}\r\n                className=\"Modal\"> \r\n                    <h2>{props.combat.name}</h2>\r\n                    {props.combat.value != null && \r\n                        <div> \r\n                            <p>Value: {props.combat.value} </p>\r\n                            <button onClick={() => changeStatLevel(-1, 'value')}>-</button>\r\n                            <button onClick={() => changeStatLevel(1, 'value')}>+</button>\r\n                        </div> \r\n                    }\r\n                    {props.combat.maximum != null && \r\n                        <div>\r\n                            <p>Maximum: {props.combat.maximum} </p>\r\n                            <button onClick={() => changeStatLevel(-1, 'maximum')}>-</button>\r\n                            <button onClick={() => changeStatLevel(1, 'maximum')}>+</button>\r\n                        </div> \r\n                    }\r\n                    {props.combat.total != null &&\r\n                        <div>\r\n                            <p>Total: {props.combat.total}</p>\r\n                            <button onClick={() => changeStatLevel(-1, 'total')}>-</button>\r\n                            <button onClick={() => changeStatLevel(1, 'total')}>+</button>\r\n                        </div> \r\n                    }\r\n                    {props.combat.successes != null && \r\n                        <div>\r\n                            <p>Successes: {props.combat.successes}</p> \r\n                            <button onClick={() => changeStatLevel(-1, 'successes')}>-</button>\r\n                            <button onClick={() => changeStatLevel(1, 'successes')}>+</button>\r\n                            <p>Failiures: {props.combat.failures}</p> \r\n                            <button onClick={() => changeStatLevel(-1, 'failures')}>-</button>\r\n                            <button onClick={() => changeStatLevel(1, 'failures')}>+</button>\r\n                        </div> \r\n                    }   \r\n                    <button onClick={() => closeModal()}>Close</button>\r\n            </Modal> \r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Combat(props){\r\n\r\n    /* FILTER COMBAT */\r\n    const [searchString, setSearchString] = React.useState(\"\");\r\n    let filteredCombat = props.character.combats;\r\n    \r\n    if(searchString !== \"\"){\r\n\r\n        let keys = ['name'];\r\n\r\n        filteredCombat = filteredCombat.filter(entry => {\r\n            let returnValue = false;\r\n            keys.forEach(key => {\r\n                if(entry[key].toLowerCase().indexOf(searchString.toLocaleLowerCase()) !== -1){\r\n                    returnValue = true;\r\n                }\r\n            });\r\n            return returnValue;\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div className=\"combat page\">\r\n\r\n            <input type=\"text\" placeholder={\"combat\"} onChange={e => {setSearchString(e.target.value)}}></input>\r\n            {filteredCombat.map((combat, i) => {\r\n                return <CombatCard key={i} combat={combat} character={props.character} updatedCharacter={props.updatedCharacter} />\r\n            })}\r\n\r\n            {/*scrolls to the top of the page*/}\r\n            <ScrollToTop/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CharacterPage({ match }) {\r\n\r\n    // State hook for the characters\r\n    const [characters, setCharacters] = React.useState([]);\r\n    const [hasLoaded, setLoaded] = React.useState(false);\r\n    let [character, setCharacter] = React.useState(null);\r\n\r\n    const [hasSaved, setHasSaved] = React.useState(false);\r\n\r\n    // Used to display which page we're currently on\r\n    const [currentPage, setCurrentPage] = React.useState(\"stats\");\r\n\r\n    let updatedCharacter = (character) => {\r\n        let index = findIndexWithAttribute(characters, 'ID', character.ID);\r\n\r\n        characters[index] = character;\r\n        writeCharactersToJSON(characters, setHasSaved);\r\n\r\n        setCharacter(character);\r\n    }\r\n\r\n    if(hasSaved){\r\n        setHasSaved(false);\r\n    }\r\n\r\n    if(hasLoaded) {\r\n        \r\n        character = (characters.find(c => c.ID.toString() === match.params.ID));    \r\n\r\n        if(currentPage === \"stats\"){\r\n            return(\r\n                <div>\r\n                    <CharacterHeader character={character} currentPage={currentPage} setCurrentPage={setCurrentPage} updatedCharacter={updatedCharacter} />\r\n                    <Stats character={character} updatedCharacter={updatedCharacter} />\r\n                </div>\r\n            )\r\n        }\r\n        else if(currentPage === \"inventory\"){\r\n            return(\r\n                <div>\r\n                    <CharacterHeader character={character} currentPage={currentPage} setCurrentPage={setCurrentPage} updatedCharacter={updatedCharacter}/>\r\n                    <Inventory character={character} updatedCharacter={updatedCharacter} />\r\n                </div>\r\n            )\r\n        }\r\n        else if(currentPage === \"combat\") {\r\n            return(\r\n                <div>\r\n                    <CharacterHeader character={character} currentPage={currentPage} setCurrentPage={setCurrentPage} updatedCharacter={updatedCharacter}/>\r\n                    <Combat character={character} updatedCharacter={updatedCharacter}/>\r\n                </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div>\r\n                    Something went wrong\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }else{\r\n        getCharactersFromJSON(setCharacters, setLoaded); // Load the characters!\r\n        return(\r\n            <div>\r\n                Loading Character\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharacterPage;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport CharacterSelect from './CharacterSelect'\r\nimport CharacterPage from './CharacterPage'\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n//import {deleteAllCharacters} from '../characters_utility';\r\n\r\nfunction App() {\r\n  \r\n  //deleteAllCharacters();\r\n\r\n  return(\r\n    \r\n    <Router>\r\n      <Switch>\r\n        \r\n        <Route path=\"/character_page/:ID\" component={CharacterPage} />\r\n\r\n        <Route path=\"/\">\r\n          <CharacterSelect />\r\n        </Route>\r\n\r\n      </Switch>\r\n\r\n    </Router>\r\n    \r\n  );\r\n    \r\n  /*\r\n  return (\r\n    <div className=\"App\">\r\n          <p>Persistence</p>\r\n\r\n          <button onClick = {e => {\r\n              getCharactersFromJSON(setCharacters);\r\n          }} >Load Characters</button>\r\n          \r\n          <button onClick = {e => {\r\n              console.log(characters[5]);\r\n          }}>Debug Log Characters</button>\r\n\r\n          <button onClick = {e => {\r\n              characters.push(getBaseCharacter(\"Gandalf\", 10));\r\n          }}> Create character </button>\r\n\r\n          <button onClick={e => {\r\n              fs.writeFile(\"characters.json\", JSON.stringify(characters), 'utf8', err => {\r\n                  if(err) throw err;\r\n              });\r\n          }}>Save Characters to File</button>\r\n\r\n      </div>\r\n    )\r\n    */\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/wizard_color.28c76236.png\";","module.exports = __webpack_public_path__ + \"static/media/elf.b2ff27af.png\";","module.exports = __webpack_public_path__ + \"static/media/orc.abfd03a2.png\";","module.exports = __webpack_public_path__ + \"static/media/rogue.9f34dfdd.png\";","module.exports = __webpack_public_path__ + \"static/media/knight.b564c383.png\";","module.exports = __webpack_public_path__ + \"static/media/constitution_color.fc06735b.png\";","module.exports = __webpack_public_path__ + \"static/media/Intelligence_color.bd5c97b5.png\";","module.exports = __webpack_public_path__ + \"static/media/Strength_color.509a3f71.png\";","module.exports = __webpack_public_path__ + \"static/media/wisdom_color.e0680679.png\";","module.exports = __webpack_public_path__ + \"static/media/charisma.51c18790.png\";","module.exports = __webpack_public_path__ + \"static/media/dexterity.e0a46776.png\";"],"sourceRoot":""}